{
    "version": "https://jsonfeed.org/version/1",
    "title": "菜b的爬虫记录 • All posts by \"app逆向\" category",
    "description": "",
    "home_page_url": "http://yida506.github.io",
    "items": [
        {
            "id": "http://yida506.github.io/2022/08/22/App%E5%8F%82%E6%95%B0%E5%AE%9A%E4%BD%8D/",
            "url": "http://yida506.github.io/2022/08/22/App%E5%8F%82%E6%95%B0%E5%AE%9A%E4%BD%8D/",
            "title": "App参数定位",
            "date_published": "2022-08-22T13:17:11.000Z",
            "content_html": "<h3 id=\"参数定位\"><a href=\"#参数定位\" class=\"headerlink\" title=\"参数定位\"></a>参数定位</h3><p>​        对于一个app来讲，我们往往要获得的是其加密参数，一般来讲，都是通过对网络请求抓包，然后分析参数逻辑，确定加密位置，但是，这样有一个弊端，假使存在了针对抓包的对抗(sslping等)，就会增加定位参数的逻辑成本，基于此，本文提供了另一种思路用于定位参数逻辑。</p>\n<h5 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h5><p>​        一般来讲，页面跳转都存在序列化-&gt;反序列化的逻辑。</p>\n<pre><code class=\"lang-java\">btnTwo.setOnClickListener(new View.OnClickListener()&#123;\n            @Override\n            public void onClick(View v) &#123;\n                Intent intent = new Intent(MainActivity.this, SecondActivity.class);\n                // 创建一个Bundle对象封装数据\n                Bundle data = new Bundle();\n                data.putInt(&quot;age&quot;,18);\n                data.putString(&quot;name&quot;, &quot;Jack&quot;);\n                intent.putExtra(&quot;data&quot;, data);\n                startActivity(intent);\n            &#125;\n        &#125;);\n// 第二个页面\nBundle data = getIntent().getBundleExtra(&quot;data&quot;);\nint id = data.getInt(&quot;age&quot;);\n</code></pre>\n<p>​        这里的逻辑是给按钮绑定点击事件，然后，<code>startActivity</code>就是页面跳转的逻辑，然后就把第一页的数据传到了第二页。</p>\n<pre><code class=\"lang-javascript\">// 打印调用堆栈\nfunction printStack() &#123;\n    Java.perform(function () &#123;\n        var Exception = Java.use(&quot;java.lang.Exception&quot;);\n        var ins = Exception.$new(&quot;Exception&quot;);\n        var straces = ins.getStackTrace();\n        if (straces != undefined &amp;&amp; straces != null) &#123;\n            var strace = straces.toString();\n            var replaceStr = strace.replace(/,/g, &quot;\\r\\n&quot;);\n            console.log(&quot;=============================Stack strat=======================&quot;);\n            console.log(replaceStr);\n            console.log(&quot;=============================Stack end=======================\\r\\n&quot;);\n            Exception.$dispose();\n        &#125;\n    &#125;);\n&#125;\n\n\n// hook intent\nfunction hookintent() &#123;\n    Java.perform(function()&#123;\n        let Intent = Java.use(&quot;android.content.Intent&quot;);\n        // 要注意这里的重载类型\n        Intent.putExtra.overload(&#39;java.lang.String&#39;, &#39;android.os.Bundle&#39;).implementation = function(a, b)&#123;\n            console.log(&quot;hook intent&quot;)\n            printStack()\n            return this.putExtra(a, b);\n        &#125;;\n\n    &#125;)\n&#125;;\n</code></pre>\n<h5 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h5><p>​        第二种就是Hook Android 原生组件，因为，数据如何传输，最终还是会渲染到页面上，这样只需要，hook对应的组件，打印调用堆栈，就能定位到入口。</p>\n<pre><code class=\"lang-javascript\">// hook setText\nfunction hooksetText()&#123;\n    Java.perform(function()&#123;\n        let TextView = Java.use(&quot;android.widget.TextView&quot;);\n        var stringClzz = Java.use(&#39;java.lang.String&#39;);\n        TextView.setText.overload(&#39;java.lang.CharSequence&#39;).implementation = function(a)&#123;\n            console.log(&quot;hook text View&quot;)\n            var obj1= Java.cast(a, stringClzz); // 类型转化\n            console.log(obj1);\n            if( obj1.indexOf(&quot;test&quot;) &gt; -1) &#123;\n                printStack();\n            &#125;;\n            return this.setText(a);\n        &#125;;\n\n    &#125;);\n&#125;;\n</code></pre>\n<blockquote>\n<p>缺点就是，只能应对原生组件</p>\n</blockquote>\n<h5 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h5><p>​        第三种，就是hook弹窗。</p>\n<pre><code class=\"lang-javascript\">function hookdialog()&#123;\n    Java.perform(function()&#123;\n        let Builder = Java.use(&quot;androidx.appcompat.app.AlertDialog$Builder&quot;);\n        var stringClzz = Java.use(&#39;java.lang.String&#39;);\n        console.log(&#39;hook dialog&#39;);\n        Builder.setMessage.overload(&#39;java.lang.CharSequence&#39;).implementation = function(a)&#123;\n            console.log(&quot;hook dialog1&quot;);\n            var obj1= Java.cast(a, stringClzz); // 类型转化\n            console.log(obj1);\n            printStack()\n            return this.setMessage(a);\n        &#125;;\n\n    &#125;);\n&#125;;\n</code></pre>\n",
            "tags": [
                "app进阶"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/08/08/unidbg%E8%A1%A5%E7%8E%AF%E5%A2%83/",
            "url": "http://yida506.github.io/2022/08/08/unidbg%E8%A1%A5%E7%8E%AF%E5%A2%83/",
            "title": "unidbg补环境",
            "date_published": "2022-08-08T04:45:27.000Z",
            "content_html": "<h4 id=\"补环境\"><a class=\"anchor\" href=\"#补环境\">#</a> 补环境</h4>\n<h5 id=\"运行流程\"><a class=\"anchor\" href=\"#运行流程\">#</a> 运行流程</h5>\n<p>对于 unidbg 来讲，整体的运行流程如下：</p>\n<p><strong>构造方法:</strong></p>\n<ul>\n<li>构建模拟器实例</li>\n<li>创建虚拟机</li>\n<li>加载 so</li>\n<li>调用 jni_onload (针对构造方法)</li>\n</ul>\n<p><strong>mian：</strong></p>\n<ul>\n<li>初始化类实例</li>\n<li>调用方法，计算参数</li>\n</ul>\n<p>这样一来，主要的逻辑就在所编写的对应方法中，这样一来，我们只需要针对不同的 native 方法编写对应的逻辑，调用即可。但随之而来了一些问题，比如，依赖了其他的 so 文件，对于使用了 java 层的方法，在 unidbg 中没有实现，在 native 类中调用了其他的静态方法等等。</p>\n<p>对于这些问题，我们就需要手动的补出对应的环境，解决对应的问题。</p>\n<h5 id=\"类型介绍\"><a class=\"anchor\" href=\"#类型介绍\">#</a> 类型介绍</h5>\n<h6 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h6>\n<p>在 java 中对于字符串类型啥的，都直接通过 String str 声明，但是在 Unidbg 中有所不同</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringObject</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>跟进去看</p>\n<p><img data-src=\"http://pic.ddddhm.cn/unidbg%E8%A1%A5%E7%8E%AF%E5%A2%83/image-20220808150043257.png\" alt=\"image-20220808150043257\"></p>\n<p>然后这里也其实就相当于</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">DvmObject</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java/lang/string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h6 id=\"byte\"><a class=\"anchor\" href=\"#byte\">#</a> Byte []</h6>\n<p>与 String 类似</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> input <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inputByte <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">ByteArray</span> inputByteArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArray</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span>inputByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h6 id=\"content上下文\"><a class=\"anchor\" href=\"#content上下文\">#</a> Content (上下文)</h6>\n<p>content 类由于 unidbg 中未实现，所以需要手动实现一下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">DvmObject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> context <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"android/content/Context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 这里的 newObject 其实就是相当于给 DvmObject 了个 value 原理还是和上述类似  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DvmObject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">newObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DvmObject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>这里给 null 主要是因为，这玩意一般是用于计算签名参数，所以给任何值都无所谓，只要在 so 计算签名的时候 patch 掉就行。</p>\n</blockquote>\n<h5 id=\"补环境-2\"><a class=\"anchor\" href=\"#补环境-2\">#</a> 补环境</h5>\n<p>在补环境之前，先把日志打开，这样就可以看到运行流程中的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DalvikVM</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BaseVM</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来介绍两种类型的补法：</p>\n<ul>\n<li>普通函数</li>\n</ul>\n<figure class=\"highlight log\"><figcaption data-lang=\"log\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">java.lang.UnsupportedOperationException:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>android<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>ActivityThread<span class=\"token operator\">-</span><span class=\"token operator\">></span>sPackageManager<span class=\"token operator\">:</span>Landroid<span class=\"token operator\">/</span>content<span class=\"token operator\">/</span>pm<span class=\"token operator\">/</span>IPackageManager<span class=\"token operator\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tat com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>dvm<span class=\"token punctuation\">.</span>AbstractJni<span class=\"token punctuation\">.</span>getStaticObjectField<span class=\"token operator\">(</span>AbstractJni<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">103</span><span class=\"token operator\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span> 意思是 在运行getStaticObjectField方法时，签名为android<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>ActivityThread<span class=\"token operator\">-</span><span class=\"token operator\">></span>sPackageManager<span class=\"token operator\">:</span>Landroid<span class=\"token operator\">/</span>content<span class=\"token operator\">/</span>pm<span class=\"token operator\">/</span>IPackageManager 不存在</pre></td></tr></table></figure><ul>\n<li>动态函数</li>\n</ul>\n<p><img data-src=\"http://pic.ddddhm.cn/unidbg%E8%A1%A5%E7%8E%AF%E5%A2%83/image-20220808173958950.png\" alt=\"image-20220808173958950\"></p>\n<p>这种的就需要借助 jnitrace</p>\n<p>直接  <code>pip install jnitrace</code></p>\n",
            "tags": [
                "unidbg"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/08/07/weibo%E5%9B%BD%E9%99%85%E7%89%88/",
            "url": "http://yida506.github.io/2022/08/07/weibo%E5%9B%BD%E9%99%85%E7%89%88/",
            "title": "weibo国际版",
            "date_published": "2022-08-07T08:31:29.000Z",
            "content_html": "<h3 id=\"微博国际版app逆向\"><a class=\"anchor\" href=\"#微博国际版app逆向\">#</a> 微博国际版 app 逆向</h3>\n<ul>\n<li>登录参数</li>\n</ul>\n<h4 id=\"抓包\"><a class=\"anchor\" href=\"#抓包\">#</a> 抓包</h4>\n<p>直接用 charles 抓包，可以看到，登录接口主要是 i,s,p 这三个参数携带了加密信息，</p>\n<p><img data-src=\"http://pic.ddddhm.cn/weibo%E5%9B%BD%E9%99%85%E7%89%88/image-20220807163418474.png\" alt=\"image-20220807163418474\"></p>\n<h4 id=\"静态分析\"><a class=\"anchor\" href=\"#静态分析\">#</a> 静态分析</h4>\n<p>直接用 jadx 打开，直接在 <code>loginmainactivity</code>  中找，最终可以定位到 <code>WeiboSecurityUtils</code> ，这里的 caculateS 就是计算 S 参数的 native 方法。</p>\n<p><img data-src=\"http://pic.ddddhm.cn/weibo%E5%9B%BD%E9%99%85%E7%89%88/image-20220807164251105.png\" alt=\"image-20220807164251105\"></p>\n<p>接下来直接用 ida 打开</p>\n<p><img data-src=\"http://pic.ddddhm.cn/weibo%E5%9B%BD%E9%99%85%E7%89%88/image-20220807165257022.png\" alt=\"image-20220807165257022\"></p>\n<p>搜 java 找得到，明显是静态注册</p>\n<p><img data-src=\"http://pic.ddddhm.cn/weibo%E5%9B%BD%E9%99%85%E7%89%88/image-20220807165939380.png\" alt=\"image-20220807165939380\"></p>\n<p>大致看一下，除了 sub_1C60 这个函数通过 Content 校验了签名外，貌似也没哈特别的逻辑了</p>\n<h4 id=\"unidbg\"><a class=\"anchor\" href=\"#unidbg\">#</a> Unidbg</h4>\n<p>在捋清楚上述的思路后，接下来就只需要做两件事，patch (过掉) sub_1C60 的逻辑，主动调用生成参数</p>\n<p>1C60 的偏移地址可以在 View 界面找到</p>\n<p><img data-src=\"http://pic.ddddhm.cn/weibo%E5%9B%BD%E9%99%85%E7%89%88/image-20220807172939604.png\" alt=\"image-20220807172939604\"></p>\n<p>然后可以采用 hook 的方式，将这里的 FF F7 EB FE 更换为指令 mov ro,1</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">patchVerify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> patchCode <span class=\"token operator\">=</span> <span class=\"token number\">0x4FF00100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//mov r0,1 对应的操作码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> <span class=\"token number\">0x1E86</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>patchCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此外，也可以采用 unidbg 自带的 hook 命令</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Pointer</span> pointer <span class=\"token operator\">=</span> <span class=\"token class-name\">UnidbgPointer</span><span class=\"token punctuation\">.</span><span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span>emulator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> <span class=\"token number\">0x1E86</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">assert</span> pointer <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> code <span class=\"token operator\">=</span> pointer<span class=\"token punctuation\">.</span><span class=\"token function\">getByteArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0xF7</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0xEB</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0xFE</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// BL sub_1C60</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Inspector</span><span class=\"token punctuation\">.</span><span class=\"token function\">inspectString</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> <span class=\"token string\">\"patch32 code=\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Keystone</span> keystone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Keystone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KeystoneArchitecture<span class=\"token punctuation\">.</span>Arm</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">KeystoneMode<span class=\"token punctuation\">.</span>ArmThumb</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">KeystoneEncoded</span> encoded <span class=\"token operator\">=</span> keystone<span class=\"token punctuation\">.</span><span class=\"token function\">assemble</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mov r0,1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> patch <span class=\"token operator\">=</span> encoded<span class=\"token punctuation\">.</span><span class=\"token function\">getMachineCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>patch<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> code<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Inspector</span><span class=\"token punctuation\">.</span><span class=\"token function\">inspectString</span><span class=\"token punctuation\">(</span>patch<span class=\"token punctuation\">,</span> <span class=\"token string\">\"patch32 length=\"</span> <span class=\"token operator\">+</span> patch<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            pointer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> patch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> patch<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后正常调用即可</p>\n<h4 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h4>\n",
            "tags": [
                "unidbg"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/08/04/meitu/",
            "url": "http://yida506.github.io/2022/08/04/meitu/",
            "title": "meitu",
            "date_published": "2022-08-04T10:23:26.000Z",
            "content_html": "<h3 id=\"美图秀秀\"><a class=\"anchor\" href=\"#美图秀秀\">#</a> 美图秀秀</h3>\n<p>直接用 charles 抓包，加密参数就应该是这个 sig</p>\n<p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220804190817096.png\" alt=\"image-20220804190817096\"></p>\n<p>直接搜 sig 返回太多参数，不利于分析，搜 sigVersion</p>\n<p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220804191944318.png\" alt=\"image-20220804191944318\"></p>\n<p>看到这里有 generator 的字段，猜测跟生成有关，进一步点进去看，发现最后调用了个 native 方法</p>\n<p>hook 一下，看里面都是些什么东西</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    hook java </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    frida -U -l hook.js com.mt.mtxx.mtxx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hookso</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hook start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">var</span> SigEntity <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.meitu.secret.SigEntity\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 对应 string, byte [] ,string, object</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        SigEntity<span class=\"token punctuation\">.</span>generatorSig<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java.lang.String'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[Ljava.lang.String;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java.lang.String'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java.lang.Object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SigEntity.generatorSig.a: '</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SigEntity.generatorSig.b: '</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SigEntity.generatorSig.c: '</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SigEntity.generatorSig.d: '</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">generatorSig</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SigEntity.generatorSig.res: '</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>sig<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>hookso<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220804212317793.png\" alt=\"image-20220804212317793\"></p>\n<p>参数解释</p>\n<ul>\n<li>a: 可以写死</li>\n<li>b: 时间戳，日期，ip，设备信息等</li>\n<li>c: 固定字符串</li>\n<li>d: 固定信息 (应该是决定数据来源的)</li>\n</ul>\n<blockquote>\n<p>通过观察，这个结果很像 md5，接下来就进去 so 中看逻辑</p>\n</blockquote>\n<p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220804213410042.png\" alt=\"image-20220804213410042\"></p>\n<p>这里有点骚的是，它把 so 包名隐藏了一下</p>\n<p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220804215414627.png\" alt=\"image-20220804215414627\"></p>\n<p>这里有个 generatorSIG，点进去看，发现有 md5</p>\n<p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220804215445419.png\" alt=\"image-20220804215445419\"></p>\n<blockquote>\n<p>估计大差不差是 md5 加密了，也可以上 frid</p>\n</blockquote>\n<h4 id=\"unidbg\"><a class=\"anchor\" href=\"#unidbg\">#</a> unidbg</h4>\n<p>直接先跑一下模板</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xiayu<span class=\"token punctuation\">.</span>meituxiuxiu</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AndroidEmulator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Emulator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Module</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BreakPointCallback</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Debugger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DebuggerType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AndroidEmulatorBuilder</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AndroidResolver</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>dvm<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>dvm<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayObject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>dvm<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ByteArray</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Memory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">unicorn<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArmConst</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetSig_v9080Test</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractJni</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AndroidEmulator</span> emulator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Module</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">VM</span> vm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> apkPath <span class=\"token operator\">=</span> <span class=\"token string\">\"F:\\\\unidbg\\\\unidbg-android\\\\src\\\\test\\\\java\\\\com\\\\mtxx\\\\meitu.apk\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> soPath2 <span class=\"token operator\">=</span> <span class=\"token string\">\"F:\\\\unidbg\\\\unidbg-android\\\\src\\\\test\\\\java\\\\com\\\\mtxx\\\\librelease_sig.so\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">GetSig_v9080Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        emulator <span class=\"token operator\">=</span> <span class=\"token class-name\">AndroidEmulatorBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">for32Bit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Memory</span> memory <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        memory<span class=\"token punctuation\">.</span><span class=\"token function\">setLibraryResolver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AndroidResolver</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        vm <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">createDalvikVM</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>apkPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        vm<span class=\"token punctuation\">.</span><span class=\"token function\">setVerbose</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        vm<span class=\"token punctuation\">.</span><span class=\"token function\">setJni</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">DalvikModule</span> dm2 <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>soPath2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        dm2<span class=\"token punctuation\">.</span><span class=\"token function\">callJNI_OnLoad</span><span class=\"token punctuation\">(</span>emulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> dm2<span class=\"token punctuation\">.</span><span class=\"token function\">getModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">GetSig_v9080Test</span> getSig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetSig_v9080Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        getSig<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            emulator<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发现抛出缺少 so 文件的错误。</p>\n<p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220805134939256.png\" alt=\"image-20220805134939256\"></p>\n<p>直接在构造函数中补上另一个 so</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">DalvikModule</span> dm1 <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>soPath1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> dm1<span class=\"token punctuation\">.</span><span class=\"token function\">callJNI_OnLoad</span><span class=\"token punctuation\">(</span>emulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token class-name\">DalvikModule</span> dm2 <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>soPath2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> dm2<span class=\"token punctuation\">.</span><span class=\"token function\">callJNI_OnLoad</span><span class=\"token punctuation\">(</span>emulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> dm2<span class=\"token punctuation\">.</span><span class=\"token function\">getModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来直接调用 call 方法</p>\n<p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220807212448966.png\" alt=\"image-20220807212448966\"></p>\n<p>点进去，发现其实是少了很多</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DvmObject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStaticObjectField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BaseVM</span> vm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DvmClass</span> dvmClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> signature<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"android/app/ActivityThread->sPackageManager:Landroid/content/pm/IPackageManager;\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">return</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"android/content/pm/IPackageManager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStaticObjectField</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> dvmClass<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>直接方法里加入上述代码，接着运行，又抛出错误，从堆栈中看</p>\n<p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220807212842407.png\" alt=\"image-20220807212842407\"></p>\n<p>这里发现，他是这个 dvmClass 类缺少 getSuperclass 方法所导致，点进去</p>\n<p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220807213020044.png\" alt=\"image-20220807213020044\"></p>\n<p>可以看到，这里其实是初始化的时候缺少的 (vm.resolveClass</p>\n<p><img data-src=\"http://pic.ddddhm.cn/meitu/image-20220807215451155.png\" alt=\"image-20220807215451155\"></p>\n<p>这里看到，对于传递多个参数，那么这个 superClass 就对应的是 interfaceClasses 中第 0 个</p>\n<p>然后根据调用顺序，这里 <code>GetSuperClass</code>  出问题，归根到底，是上面的 <code>GetStaticObjectField</code>  调用，导致的原生 superClass 不存在所引出的问题，其实也就是我们上一步补的返回值出了点问题。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"android/content/pm/IPackageManager\"</span><span class=\"token punctuation\">,</span>   vm<span class=\"token punctuation\">.</span><span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Landroid/content/pm/IPackageManager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>接下来运行，发现报了个 UnsupportedOperationException 的异常</p>\n",
            "tags": [
                "unidbg"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/08/04/yrxdemo2/",
            "url": "http://yida506.github.io/2022/08/04/yrxdemo2/",
            "title": "yrxdemo2",
            "date_published": "2022-08-04T00:10:21.000Z",
            "content_html": "<h4 id=\"第二题-简单so\"><a class=\"anchor\" href=\"#第二题-简单so\">#</a> 第二题 简单 so</h4>\n<p>还是直接搜索找到如下位置</p>\n<p><img data-src=\"http://pic.ddddhm.cn/yrxdemo2/image-20220810102449541.png\" alt=\"image-20220810102449541\"></p>\n<p>编写 frida 脚本，hook 一下这个 encodeToString 是啥</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"so start:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> ByteString <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.android.okhttp.okio.ByteString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> NativeLib <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.yuanrenxue.challenge.two.NativeLib'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> Base64 <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'android.util.Base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        NativeLib<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SigEntity.generatorSig.a: '</span><span class=\"token punctuation\">,</span> ByteString<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">utf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SigEntity.generatorSig.b: '</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result:'</span><span class=\"token punctuation\">,</span>  ByteString<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            Base64<span class=\"token punctuation\">.</span>encodeToString<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val1<span class=\"token punctuation\">,</span> val2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// console.log(val1);</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// console.log(val2);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeToString</span><span class=\"token punctuation\">(</span>val1<span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">return</span> result1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"http://pic.ddddhm.cn/yrxdemo2/image-20220810145803770.png\" alt=\"image-20220810145803770\"></p>\n<p>很明显，这个就是我们想要的结果了，然后就跟进去 NativeLib.encrypt，发现是个 native 方法</p>\n<p>大致翻译一下：</p>\n<p>使用 native 方法加密，第一个参数是由页数冒号时间戳组成的 byte 数组第二个参数就是时间戳</p>\n<p><img data-src=\"http://pic.ddddhm.cn/yrxdemo2/image-20220804082551141.png\" alt=\"image-20220804082551141\"></p>\n<p>很明显，加密函数对应的 so 文件如图所示，直接用 ida 打开</p>\n<p><img data-src=\"http://pic.ddddhm.cn/yrxdemo2/image-20220804082634800.png\" alt=\"image-20220804082634800\"></p>\n<p>点进去 发现逻辑有点复杂，就不考虑继续分析 so 了</p>\n",
            "tags": [
                "YRX"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/08/03/yrxdemo1/",
            "url": "http://yida506.github.io/2022/08/03/yrxdemo1/",
            "title": "yrxdemo1",
            "date_published": "2022-08-03T03:30:33.000Z",
            "content_html": "<h3 id=\"第一题-java层加密\"><a class=\"anchor\" href=\"#第一题-java层加密\">#</a> 第一题 java 层加密</h3>\n<p><strong>packagename:</strong> com.yuanrenxue.challenge</p>\n<p>搜索题目一，定位到如下位置</p>\n<p><img data-src=\"http://pic.ddddhm.cn/yrxdemo1/image-20220803114427625.png\" alt=\"image-20220803114427625\"></p>\n<p>使用 r0capture 抓包</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># attach 模式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python r0capture<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span>U com<span class=\"token punctuation\">.</span>yuanrenxue<span class=\"token punctuation\">.</span>challenge <span class=\"token operator\">-</span>v <span class=\"token operator\">-</span>p iqiyi<span class=\"token punctuation\">.</span>pcap</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># spawn 模式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>python r0capture<span class=\"token punctuation\">.</span>py <span class=\"token operator\">-</span>U <span class=\"token operator\">-</span>f com<span class=\"token punctuation\">.</span>yuanrenxue<span class=\"token punctuation\">.</span>challenge <span class=\"token operator\">-</span>v</pre></td></tr></table></figure><p>抓完后用 wireshark 打开 pcap 文件，发现，这里就是发送数据的地方， source 为 192.168.0.100 发送的了请求，携带了 page、sign、t 三个参数</p>\n<p><img data-src=\"http://pic.ddddhm.cn/yrxdemo1/image-20220803144525277.png\" alt=\"image-20220803144525277\"></p>\n<p>发送参数</p>\n<p><img data-src=\"http://pic.ddddhm.cn/yrxdemo1/image-20220803144418271.png\" alt=\"image-20220803144418271\"></p>\n<p>返回数据</p>\n<p><img data-src=\"http://pic.ddddhm.cn/yrxdemo1/image-20220803144632863.png\" alt=\"image-20220803144632863\"></p>\n<p>通过参数的值，我们很容易就能猜测到，page 就是页面，t 就是时间戳，sign 就是加密参数，接下来就跟进 jadx 中分析具体逻辑</p>\n<p><img data-src=\"http://pic.ddddhm.cn/yrxdemo1/image-20220803144936909.png\" alt=\"image-20220803144936909\"></p>\n<p>在这里很容易看到，page 和时间戳的生成逻辑，即这个 OooO2 就是对应的 sign 参数，点进去发现涉及到了个复杂的算法，相当于将 page 和时间戳拼接到了个 StringBuider 中，然后在转化为 byte 数组，经过这一系列加密，拿到了最后的加密结果。</p>\n<p><img data-src=\"http://pic.ddddhm.cn/yrxdemo1/image-20220803145223487.png\" alt=\"image-20220803145223487\"></p>\n<p>用将加密算法放入 idea 中，写一个 demo，最后拿到对应的参数</p>\n<p><img data-src=\"http://pic.ddddhm.cn/yrxdemo1/image-20220803154213156.png\" alt=\"image-20220803154213156\"></p>\n<h4 id=\"okhttp3使用\"><a class=\"anchor\" href=\"#okhttp3使用\">#</a> okhttp3 使用</h4>\n<p>在 xml 中加入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.squareup.okhttp3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>okhttp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.8.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.google.code.gson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.8.9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>下面哪个是 gson 用于解析 json 的</p>\n</blockquote>\n<p>然后编写如下代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 需要单独建一个类用于将 gson 解析的字符串与其对应，然后用。访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YrxData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Datalist</span><span class=\"token punctuation\">></span></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Datalist</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"采集\"><a class=\"anchor\" href=\"#采集\">#</a> 采集</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> page<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> currentTimeMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>currentTimeMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Oooo000</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">OooO</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> sign<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Integer</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">OkHttpClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHttpClient<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span> url1 <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.python-spider.com/api/app1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> page <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> page <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> page<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">long</span> currentTimeMillis <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> <span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span>currentTimeMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">RequestBody</span> body <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>currentTimeMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token class-name\">String</span> resStr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">+</span><span class=\"token string\">\" ===> \"</span><span class=\"token operator\">+</span> resStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token class-name\">YrxData</span> yrxdata <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>resStr<span class=\"token punctuation\">,</span><span class=\"token class-name\">YrxData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token class-name\">Integer</span> nowvalue <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>yrxdata<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nowvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    result <span class=\"token operator\">+=</span> nowvalue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 结果 5137931</span></pre></td></tr></table></figure>",
            "tags": [
                "YRX"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/08/03/easyso/",
            "url": "http://yida506.github.io/2022/08/03/easyso/",
            "title": "easyso",
            "date_published": "2022-08-03T02:47:01.000Z",
            "content_html": "<h3 id=\"easyso\"><a class=\"anchor\" href=\"#easyso\">#</a> Easyso</h3>\n<p>直接 jadx 打开，很明显是通过 CheckString 这个方法进行的判断。</p>\n<p><img data-src=\"http://pic.ddddhm.cn/easyso/image-20220803105345599.png\" alt=\"image-20220803105345599\"></p>\n<p>然后打开 so</p>\n<p><img data-src=\"http://pic.ddddhm.cn/easyso/image-20220803105900353.png\" alt=\"image-20220803105900353\"></p>\n<p>大意是通过比较 v6 和这个字符串，如果相等就返回 true</p>\n<p>跟进 j_TestDec 查看逻辑</p>\n<p><img data-src=\"http://pic.ddddhm.cn/easyso/image-20220803111254528.png\" alt=\"image-20220803111254528\"></p>\n<p>大致上其实是对一个长度为 32 的字符做了这样一个操作，直接用 py 逆向还原</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>longstr <span class=\"token operator\">=</span> <span class=\"token string\">\"f72c5a36569418a20907b55be5bf95ad\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result <span class=\"token operator\">=</span> result <span class=\"token operator\">+</span> longstr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> longstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/08/02/mobilectf2/",
            "url": "http://yida506.github.io/2022/08/02/mobilectf2/",
            "title": "mobilectf2",
            "date_published": "2022-08-02T13:21:28.000Z",
            "content_html": "<h3 id=\"ctf第二题\"><a class=\"anchor\" href=\"#ctf第二题\">#</a> CTF 第二题</h3>\n<p>模拟登录</p>\n<p>packagename:com.tencent.testvuln</p>\n<h4 id=\"静态分析\"><a class=\"anchor\" href=\"#静态分析\">#</a> 静态分析</h4>\n<p>直接打开 mainactivity 看到，这里点击了登录按钮后，直接通过序列化 (intent) 传到了下一个页面</p>\n<p><img data-src=\"http://pic.ddddhm.cn/mobilectf2/image-20220802212523959.png\" alt=\"image-20220802212523959\"></p>\n<p>点进去发现，其实就是对输入的这两个玩意做了个加密</p>\n<p><img data-src=\"http://pic.ddddhm.cn/mobilectf2/image-20220802212656609.png\" alt=\"image-20220802212656609\"></p>\n<p>跟进去发现是 native 方法</p>\n<p><img data-src=\"http://pic.ddddhm.cn/mobilectf2/image-20220802213646813.png\" alt=\"image-20220802213646813\"></p>\n<p>找到对应的方法，可以看到，这里估计就是采用了 aes 的加密</p>\n<p>编写 aes 脚本</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#coding:utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># VEIzd/V2UPYNdn/bxH3Xig==</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 9YuQ2dk8CSaCe7DTAmaqAA==</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cipher <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">'VEIzd/V2UPYNdn/bxH3Xig=='</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cipher2 <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">'9YuQ2dk8CSaCe7DTAmaqAA=='</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token string\">b'thisisatestkey=='</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>aes <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_ECB<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>msg <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>cipher<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>msg2 <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>cipher2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg2<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># aimagetencent\u0003\u0003\u0003</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># Cas3_0f_A_CAK3\u0002</span></pre></td></tr></table></figure><p>然后直接用这个提交，发现错误，估计存在啥不清楚的地方，再看题目名称，app 漏洞第二题，直接搜索 Encrpto, 发现 FileDataActivity 中有个解密操作，然后用 aes 脚本测试，拿到结果，提交成功。</p>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/08/02/mobilectf/",
            "url": "http://yida506.github.io/2022/08/02/mobilectf/",
            "title": "mobilectf",
            "date_published": "2022-08-02T07:59:10.000Z",
            "content_html": "<h3 id=\"ctf移动端\"><a class=\"anchor\" href=\"#ctf移动端\">#</a> CTF 移动端</h3>\n<h4 id=\"第一题-illusion\"><a class=\"anchor\" href=\"#第一题-illusion\">#</a> 第一题 Illusion</h4>\n<p>jadx 打开</p>\n<p><img data-src=\"http://pic.ddddhm.cn/mobilectf/image-20220802160426972.png\" alt=\"image-20220802160426972\"></p>\n<p>发现就是对输入的进行了一个判断，用到的是 native 方法</p>\n<p>用 ida 打开 so，然后修改下变量名</p>\n<p><img data-src=\"http://pic.ddddhm.cn/mobilectf/image-20220802161701172.png\" alt=\"image-20220802161701172\"></p>\n<p>这里的 aE 就对应的下面这个长字符串</p>\n<p><img data-src=\"http://pic.ddddhm.cn/mobilectf/image-20220802161639961.png\" alt=\"image-20220802161639961\"></p>\n<p>然后这串代码的大致意思其实就是判断计算的这个 Buffer 中的每一个值是不是和 enc 中的相等，如果相等那就返回 correct，接下来就需要进一步查看 sub_10C0 的逻辑，因为这里的 a2 恒为 93，那么直接进入 sub_1028 查看对应逻辑</p>\n<p><img data-src=\"http://pic.ddddhm.cn/mobilectf/image-20220802162458311.png\" alt=\"image-20220802162458311\"></p>\n<p>直接把 sub_10C0 代码 copy 下来测试</p>\n<p><img data-src=\"http://pic.ddddhm.cn/mobilectf/image-20220802164705080.png\" alt=\"image-20220802164705080\"></p>\n<p>发现主要逻辑与 a1,a2 的大小有关，如果 a1 小于 a2 就为 0，同时观察函数名可以猜测应该和除有关，接着测试几个，发现这个其实就是整数除法。</p>\n<p>回到 so 开始位置还原逻辑</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 对应的 for 循环内部的操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">-</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">93</span> <span class=\"token operator\">>></span> <span class=\"token number\">32</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span> <span class=\"token operator\">=</span> c </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c <span class=\"token operator\">-</span> <span class=\"token number\">32</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">-</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">93</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>c <span class=\"token operator\">+</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> b <span class=\"token operator\">=</span> a <span class=\"token punctuation\">[</span>分情况<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><img data-src=\"http://pic.ddddhm.cn/mobilectf/image-20220802202342663.png\" alt=\"image-20220802202342663\"></p>\n<ul>\n<li>\n<p>ord 返回字符的 unicode 编码</p>\n</li>\n<li>\n<p>chr 将 unicode 编码转化为字符</p>\n</li>\n</ul>\n<p>直接不采用分情况的写法会拿到如下 ascii 码表，其中包含负数，我们知道一个负数 / 93 然后在 &gt;&gt; 32 是会得到 0 的，同时，如果一个数大于 32 , 那么 对其进行 &gt;&gt;32 的操作，其实是不会变的，所以就需要分离出小于 32 的情况。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token string\">'(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>enc <span class=\"token operator\">=</span> <span class=\"token string\">\"Ku@'G_V9v(yGS\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>j <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">93</span><span class=\"token operator\">+</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># CISCN&#123;GJ5728&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>这里有个小 bug，就是 key 这里的值，用 Ida 打开直接看发现是上述那个 32 位的字符串</p>\n</blockquote>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/07/31/Native/",
            "url": "http://yida506.github.io/2022/07/31/Native/",
            "title": "Native",
            "date_published": "2022-07-31T01:50:43.000Z",
            "content_html": "<h4 id=\"native基础\"><a class=\"anchor\" href=\"#native基础\">#</a> Native 基础</h4>\n<p>一般来讲，在 Android 开发中，除了使用 Java 语言开发并编译为 dex 文件然后由 ART 虚拟机执行的方式外，和 web 端的 wasm 一样，移动端也纯在套用 c<ins> 代码进行开并编译执行的方式 (通过 java Native Interface 可以调用 C/C</ins> 函数)。</p>\n<p><strong>优点:</strong></p>\n<ul>\n<li>性能</li>\n<li>安全</li>\n</ul>\n<h4 id=\"ndk开发流程\"><a class=\"anchor\" href=\"#ndk开发流程\">#</a> NDK 开发流程</h4>\n<h5 id=\"静态注册\"><a class=\"anchor\" href=\"#静态注册\">#</a> 静态注册</h5>\n<p>直接 android Studio 新建一个 C++demo</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Native/image-20220731102519921.png\" alt=\"image-20220731102519921\"></p>\n<p>可以看到这里相比于普通的 java 开发，多了一个 cpp 文件，然后这里应该是返回了一个字符</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Native/image-20220731102716523.png\" alt=\"image-20220731102716523\"></p>\n<p>然后在 mainactivity 中，可以看到，这里实际上就是将 native 中的字符渲染到 TextViewz 组件中</p>\n<p>打包为 APK 后，用 jadx 打开</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Native/image-20220731103653417.png\" alt=\"image-20220731103653417\"></p>\n<p>源码几乎和本地的没啥区别，接着用 ida 打开对应的 so 文件</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Native/image-20220731105504825.png\" alt=\"image-20220731105504825\"></p>\n<p>用 objection 查看</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Native/image-20220731154452579.png\" alt=\"image-20220731154452579\"></p>\n<p>这里指代的是对应的基地址，由于基地址每次都是变化的，所以我们需要要拿到对应的相对地址</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>方法地址</mtext><mo>=</mo><mtext>基地址</mtext><mo>+</mo><mtext>偏移地址</mtext></mrow><annotation encoding=\"application/x-tex\">方法地址=基地址+偏移地址\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">方</span><span class=\"mord cjk_fallback\">法</span><span class=\"mord cjk_fallback\">地</span><span class=\"mord cjk_fallback\">址</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">基</span><span class=\"mord cjk_fallback\">地</span><span class=\"mord cjk_fallback\">址</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">偏</span><span class=\"mord cjk_fallback\">移</span><span class=\"mord cjk_fallback\">地</span><span class=\"mord cjk_fallback\">址</span></span></span></span></span></p>\n<blockquote>\n<p>偏移地址直接从 ida 拿就好了，</p>\n</blockquote>\n<h5 id=\"导出函数名hook\"><a class=\"anchor\" href=\"#导出函数名hook\">#</a> 导出函数名 hook</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_native</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> addr <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">getExportByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libnativeappdemo.so\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java_com_example_nativeappdemo_MainActivity_stringFromJNI\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jnienv pointer =>'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jobj pointer =>'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'retval is =>'</span><span class=\"token punctuation\">,</span> Java<span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">getEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStringUtfChars</span><span class=\"token punctuation\">(</span>retval<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>hook_native<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"http://pic.ddddhm.cn/Native/image-20220731224137172.png\" alt=\"image-20220731224137172\"></p>\n<h5 id=\"函数地址hook\"><a class=\"anchor\" href=\"#函数地址hook\">#</a> 函数地址 hook</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"so start:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> address <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">findBaseAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libnativeappdemo.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>地址<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func address:\"</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"params1\"</span><span class=\"token punctuation\">,</span> Memory<span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"here???\"</span><span class=\"token punctuation\">,</span> retval<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>这里的地址可以直接用 ida 查看，对于 32 位的需要 + 1</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://yida506.github.io/2022/07/28/jg%E6%96%B0%E9%97%BB/",
            "url": "http://yida506.github.io/2022/07/28/jg%E6%96%B0%E9%97%BB/",
            "title": "jg新闻",
            "date_published": "2022-07-28T10:03:36.000Z",
            "content_html": "<h4 id=\"app\"><a class=\"anchor\" href=\"#app\">#</a> APP</h4>\n<p>选用 <strong>com.hoge.android.app.hljapp_3.8.7_20220615.apk</strong> 这一版本的 app</p>\n<h5 id=\"root检测\"><a class=\"anchor\" href=\"#root检测\">#</a> root 检测</h5>\n<p>打开发现有 root 检测</p>\n<p><img data-src=\"http://pic.ddddhm.cn/jg%E6%96%B0%E9%97%BB/image-20220728181132781.png\" alt=\"image-20220728181132781\"></p>\n<p>直接采用 objection 在启动阶段过掉检测</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>objection -g appname explore --startup-command <span class=\"token string\">\"android root disable\"</span></pre></td></tr></table></figure><blockquote>\n<p>这里主要是将 root 后端文件特征抹掉</p>\n</blockquote>\n<p>注入后就可以正常进入 app 了</p>\n<p><img data-src=\"http://pic.ddddhm.cn/jg%E6%96%B0%E9%97%BB/image-20220728184938632.png\" alt=\"image-20220728184938632\"></p>\n<h5 id=\"app抓包\"><a class=\"anchor\" href=\"#app抓包\">#</a> app 抓包</h5>\n<p>使用 postern 抓包后，获取如下接口内容，发现主要的加密参数可能为如下两个:</p>\n<p><img data-src=\"http://pic.ddddhm.cn/jg%E6%96%B0%E9%97%BB/image-20220729095038572.png\" alt=\"image-20220729095038572\"></p>\n<h5 id=\"静态分析\"><a class=\"anchor\" href=\"#静态分析\">#</a> 静态分析</h5>\n<h6 id=\"脱壳\"><a class=\"anchor\" href=\"#脱壳\">#</a> 脱壳</h6>\n<p>直接用 jadx 打开，发现应该是 360 的壳</p>\n<p><img data-src=\"http://pic.ddddhm.cn/jg%E6%96%B0%E9%97%BB/image-20220729095513391.png\" alt=\"image-20220729095513391\"></p>\n<p>直接用 frida_dexdump 脱壳.</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip3 <span class=\"token function\">install</span> frida-dexdump</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 脱壳</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>frida-dexdump -FU</pre></td></tr></table></figure><p><img data-src=\"http://pic.ddddhm.cn/jg%E6%96%B0%E9%97%BB/image-20220729100252532.png\" alt=\"image-20220729100252532\"></p>\n<blockquote>\n<p>本质上应该是直接把 dex 文件导出来</p>\n</blockquote>\n<h6 id=\"jadx分析\"><a class=\"anchor\" href=\"#jadx分析\">#</a> jadx 分析</h6>\n<p>然后把 dex 文件拖到 jadx 中搜索参数，很明显这里估计就是对应的参数加密的位置</p>\n<p><img data-src=\"http://pic.ddddhm.cn/jg%E6%96%B0%E9%97%BB/image-20220729191816673.png\" alt=\"image-20220729191816673\"></p>\n<p>很明显，这里的 account 应该是个随机数，接下来跟进 getSign 中看</p>\n<p><img data-src=\"http://pic.ddddhm.cn/jg%E6%96%B0%E9%97%BB/image-20220729193630021.png\" alt=\"image-20220729193630021\"></p>\n<p>跟到最里面发现它其实是一个 interface 的实现，直接搜索，发现它是 native 方法</p>\n<p><img data-src=\"http://pic.ddddhm.cn/jg%E6%96%B0%E9%97%BB/image-20220729193736930.png\" alt=\"image-20220729193736930\"></p>\n<h6 id=\"ida分析\"><a class=\"anchor\" href=\"#ida分析\">#</a> ida 分析</h6>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS13dGYtaXEwZjM4aXFzYWUwcWkxY24wOGQzNWEuc28=\">直接打开对应的 wtf.so</span>，然后搜索 java 进到对应的 get_Sign 方法中</p>\n<p><img data-src=\"http://pic.ddddhm.cn/jg%E6%96%B0%E9%97%BB/image-20220730160805506.png\" alt=\"image-20220730160805506\"></p>\n<p>然后直接 hook so 即可</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"so start:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> address <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">findBaseAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libnativeappdemo.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x154</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func address:\"</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"params1\"</span><span class=\"token punctuation\">,</span> Memory<span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"here???\"</span><span class=\"token punctuation\">,</span> retval<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://yida506.github.io/2022/07/27/android%E8%84%B1%E5%A3%B3/",
            "url": "http://yida506.github.io/2022/07/27/android%E8%84%B1%E5%A3%B3/",
            "title": "android脱壳",
            "date_published": "2022-07-27T03:14:58.000Z",
            "content_html": "<h4 id=\"壳的概念\"><a class=\"anchor\" href=\"#壳的概念\">#</a> 壳的概念</h4>\n<p>目前 app 壳按照类型，可大致分为三代：</p>\n<ul>\n<li>整体壳</li>\n<li>函数抽取壳</li>\n<li>VMP、Dex2C</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://yida506.github.io/2022/05/14/unidbg/",
            "url": "http://yida506.github.io/2022/05/14/unidbg/",
            "title": "unidbg",
            "date_published": "2022-05-14T11:34:31.000Z",
            "content_html": "<h4 id=\"前提纪要\"><a class=\"anchor\" href=\"#前提纪要\">#</a> 前提纪要</h4>\n<p>在 app 加密中，加密逻辑不单单出现在 java 方法中，也有可能出现在 native 方法中，wiki 中介绍，java native interface 是能将 java 代码运行在 jvm 同时可以让其他语言类似 C,C++ 本机调用的方法。</p>\n<p>同时，在 java 代码中会以如下方式出现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 加载库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">o00OO<span class=\"token punctuation\">.</span></span>OooO00o<span class=\"token punctuation\">.</span>OooO00o</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">592843821021945178L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 加载 Native 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"unidbg介绍\"><a class=\"anchor\" href=\"#unidbg介绍\">#</a> Unidbg 介绍</h4>\n<p>unidbg 是一个基于 unicorn 的逆向工具，可以直接调用 Android 和 iOS 中的  <code>so</code>  文件。项目的 GitHub 地址为 https://github.com/zhkl0228/unidbg。</p>\n<blockquote>\n<p>idea 配好 jdk 即可</p>\n</blockquote>\n<p>本质上是 java 可以调用 c 中的方法，那么只要模拟其方法即可。</p>\n<h4 id=\"unidbg使用\"><a class=\"anchor\" href=\"#unidbg使用\">#</a> Unidbg 使用</h4>\n<p>这里以 https://www.qinless.com/1173 提到的为例，在编写对应 java 代码的时候，我们需要先编写伪方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>charset<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> oasis <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> input1 <span class=\"token operator\">=</span> <span class=\"token string\">\"aid=01A-khBWIm48A079Pz_DMW6PyZR8\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"uyTumcCNm4e8awxyC2ANU.&amp;cfrom=28B529501\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token string\">\"0&amp;cuid=5999578300&amp;noncestr=46274W9279Hr1\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">\"X49A5X058z7ZVz024&amp;platform=ANDROID&amp;timestamp\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token string\">\"=1621437643609&amp;ua=Xiaomi-MIX2S__oasis__3.5.8_\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token string\">\"_Android__Android10&amp;version=3.5.8&amp;vid=10190135\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"94003&amp;wm=20004_90024\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Boolean</span> input2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        oasis test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">oasis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span>input1<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> input2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> barr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Sign\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>就是相当于，先编写一段调用代码，保持与原生 app 调用方法一致，然后将调用 so 的逻辑写进去即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AndroidEmulator</span> emulator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">VM</span> vm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Module</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 补充构造方法，初始化 jni 啥的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">oasis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建模拟器实例，进程名建议依照实际进程名填写，可以规避针对进程名的校验</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        emulator <span class=\"token operator\">=</span> <span class=\"token class-name\">AndroidEmulatorBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">for32Bit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProcessName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.sina.oasis\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取模拟器的内存操作接口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Memory</span> memory <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 设置系统类库解析</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        memory<span class=\"token punctuation\">.</span><span class=\"token function\">setLibraryResolver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AndroidResolver</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 创建 Android 虚拟机，传入 APK，Unidbg 可以替我们做部分签名校验的工作</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        vm <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">createDalvikVM</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unidbg-android\\\\src\\\\test\\\\java\\\\com\\\\lession1\\\\lvzhou.apk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        vm = emulator.createDalvikVM(null);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 加载目标 SO</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">DalvikModule</span> dm <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unidbg-android\\\\src\\\\test\\\\java\\\\com\\\\lession1\\\\liboasiscore.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加载 so 到虚拟内存</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 获取本 SO 模块的句柄，后续需要用它</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> dm<span class=\"token punctuation\">.</span><span class=\"token function\">getModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        vm<span class=\"token punctuation\">.</span><span class=\"token function\">setJni</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置 JNI</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        vm<span class=\"token punctuation\">.</span><span class=\"token function\">setVerbose</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印日志</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        dm<span class=\"token punctuation\">.</span><span class=\"token function\">callJNI_OnLoad</span><span class=\"token punctuation\">(</span>emulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 JNI OnLoad</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​\t接着修改调用逻辑里的参数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    \t<span class=\"token comment\">// 使用 List 构建参数列表</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// args list</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// arg1 env</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">getJNIEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//arg2 jobject/jclazz 一般用不到，直接填 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// arg3 bytes</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> input <span class=\"token operator\">=</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inputByte <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ByteArray</span> inputByteArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArray</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span>inputByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">addLocalObject</span><span class=\"token punctuation\">(</span>inputByteArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//arg4 ,boolean false 填入 0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 参数准备完成</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//call function 根据地址偏移调用参数 </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Number</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span><span class=\"token function\">callFunction</span><span class=\"token punctuation\">(</span>emulator<span class=\"token punctuation\">,</span> <span class=\"token number\">0xC365</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>这里的前两个参数 env, obj 一般都不用管，由于这里第三个参数是 byte 数组类型，所以要用 unidbg 内置的 ByteArray 实现，然后用 list 包裹进去，最后 list.toArray 封装</p>\n</blockquote>\n<p>整体框架</p>\n<pre><code class=\"language-JAVA\">package com.lession2;\n\n// 导入通用且标准的类库\nimport com.github.unidbg.linux.android.dvm.AbstractJni;\nimport com.github.unidbg.AndroidEmulator;\nimport com.github.unidbg.Module;\nimport com.github.unidbg.linux.android.AndroidEmulatorBuilder;\nimport com.github.unidbg.linux.android.AndroidResolver;\nimport com.github.unidbg.linux.android.dvm.*;\nimport com.github.unidbg.linux.android.dvm.array.ByteArray;\nimport com.github.unidbg.memory.Memory;\nimport com.lession1.oasis;\n\nimport java.io.File;\n\n// 这里的sina是文件名\npublic class sina extends AbstractJni&#123;\n    private final AndroidEmulator emulator;\n    private final VM vm;\n    private final Module module;\n\n    sina() &#123;\n        // 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验\n        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(&quot;com.sina.International&quot;).build();\n        // 获取模拟器的内存操作接口\n        final Memory memory = emulator.getMemory();\n        // 设置系统类库解析\n        memory.setLibraryResolver(new AndroidResolver(23));\n        // 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作\n        vm = emulator.createDalvikVM(new File(&quot;unidbg-android\\\\src\\\\test\\\\java\\\\com\\\\lession2\\\\sinaInternational.apk&quot;));\n        //\n//        vm = emulator.createDalvikVM(null);\n\n        // 加载目标SO\n        DalvikModule dm = vm.loadLibrary(new File(&quot;unidbg-android\\\\src\\\\test\\\\java\\\\com\\\\lession2\\\\libutility.so&quot;), true); // 加载so到虚拟内存\n        //获取本SO模块的句柄,后续需要用它\n        module = dm.getModule();\n        vm.setJni(this); // 设置JNI\n        vm.setVerbose(true); // 打印日志\n        // 样本连JNI OnLoad都没有\n        // dm.callJNI_OnLoad(emulator); // 调用JNI OnLoad\n    &#125;;\n\n    public static void main(String[] args) &#123;\n        sina test = new sina();\n        // 这里调用补充的方法\n    &#125;\n    \n    // 这里补充方法\n&#125;\n</code></pre>\n",
            "tags": [
                "unidbg"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/05/03/Ratel/",
            "url": "http://yida506.github.io/2022/05/03/Ratel/",
            "title": "Ratel",
            "date_published": "2022-05-03T06:09:45.000Z",
            "content_html": "<h4 id=\"Ratel介绍\"><a href=\"#Ratel介绍\" class=\"headerlink\" title=\"Ratel介绍\"></a>Ratel介绍</h4><p>直接adb install 安装。</p>\n<h6 id=\"app感染：\"><a href=\"#app感染：\" class=\"headerlink\" title=\"app感染：\"></a>app感染：</h6><p>使用<code>ratel.bat package</code>生成被感染的app 然后<code>adb install package</code></p>\n<blockquote>\n<p>apk逻辑可以直接<code>jadx -e package</code> 导出为gradle项目，用As看</p>\n</blockquote>\n<h6 id=\"Ratel插件开发\"><a href=\"#Ratel插件开发\" class=\"headerlink\" title=\"Ratel插件开发\"></a>Ratel插件开发</h6><p>模板地址  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZpcmphclJhdGVsL3JhdGVsLW1vZHVsZS10ZW1wbGF0ZS5naXQ=\">https://github.com/virjarRatel/ratel-module-template.git</span></p>\n<p>直接使用模板创建</p>\n<p>template.bat -a <appname> -m <dirname></dirname></appname></p>\n<blockquote>\n<p>这里面的逻辑都要在handleLoadPackage中写</p>\n</blockquote>\n<pre><code class=\"lang-java\">@Override\npublic void handleLoadPackage(final RC_LoadPackage.LoadPackageParam lpparam) throws Throwable &#123;\n\n    Log.d(tag, &quot;hook begin&quot;);\n    Log.d(tag, &quot;current pacakage name : &quot; + lpparam.packageName);\n\n   //lpparam.packageName 可以输出包名,如果要针包hook,就需要z\n   if(lpparam.packageName.equals(&quot;com.example.myapplication&quot;)) &#123;\n        Log.d(tag, &quot;current is in app package&quot;);\n   &#125;\n    addFloatingButtonForActivity(lpparam);\n    Log.d(tag, &quot;hook end&quot;);\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://yida506.github.io/2022/04/23/Android%E5%9F%BA%E7%A1%80/",
            "url": "http://yida506.github.io/2022/04/23/Android%E5%9F%BA%E7%A1%80/",
            "title": "Android基础",
            "date_published": "2022-04-23T14:54:02.000Z",
            "content_html": "<h3 id=\"app介绍\"><a class=\"anchor\" href=\"#app介绍\">#</a> APP 介绍</h3>\n<h5 id=\"hello-world\"><a class=\"anchor\" href=\"#hello-world\">#</a> hello world</h5>\n<p>直接在 android 中创建一个 hello world 项目。</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Android%E5%9F%BA%E7%A1%80/image-20220425230616509.png\" alt=\"image-20220425230616509\"></p>\n<p>可以看到包含很多内容，这里的 java 里面有一个应用名称目录，其中包含了 MainActivity,</p>\n<p>Android 项目的资源会被存储在 res 文件夹中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>myapplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AppCompatActivity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 MainActivity 中，基础了一个基础的 Activity 类，然后又重写了这个 onCreate 方法，最后设置了 layout.activity_main 为 View.</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Android%E5%9F%BA%E7%A1%80/image-20220425232435459.png\" alt=\"image-20220425232435459\"></p>\n<p>这里编写了 hello world 然后渲染到了 app 主界面上.</p>\n<h6 id=\"点击事件添加\"><a class=\"anchor\" href=\"#点击事件添加\">#</a> 点击事件添加</h6>\n<p>直接修改 TextView 为 Button, 然后添加 id 属性 (&quot;@+id/check&quot;) 即可。</p>\n<p>然后在 MainActivity 中添加如下代码，绑定 button 按钮并添加事件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Button</span> bt_check <span class=\"token operator\">=</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        bt_check<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rousue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world from button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"http://pic.ddddhm.cn/Android%E5%9F%BA%E7%A1%80/image-20220426231939847.png\" alt=\"image-20220426231939847\"></p>\n<p>这样一来每次点击在后台返回了日志。</p>\n<h6 id=\"android组成部分\"><a class=\"anchor\" href=\"#android组成部分\">#</a> Android 组成部分</h6>\n<ul>\n<li>Activity 表示层 展示 UI，响应用户动作</li>\n<li>Service 更新数据源和 Activity</li>\n<li>Content Provider 数据储存器</li>\n<li>Intent 消息传递框架</li>\n<li>Broadcast Receiver Intet 监听器</li>\n<li>Widget 可视化组件</li>\n<li>Notification 向用户发起信号</li>\n</ul>\n<blockquote>\n<p>Manifest 存储在最底层，定义应用程序的组件和需求的结构和元数据。</p>\n</blockquote>\n<h5 id=\"activity\"><a class=\"anchor\" href=\"#activity\">#</a> Activity</h5>\n<p>该类为所有用户界面的基础。</p>\n<p>每一个 Activity 都表示一个屏幕，类似 web 中的 html</p>\n<h4 id=\"andriod库\"><a class=\"anchor\" href=\"#andriod库\">#</a> Andriod 库</h4>\n<h6 id=\"okhttp3\"><a class=\"anchor\" href=\"#okhttp3\">#</a> okhttp3:</h6>\n<p>网络请求相关 (类似 requests)</p>\n<h6 id=\"retrofit\"><a class=\"anchor\" href=\"#retrofit\">#</a> retrofit:</h6>\n<p>网络请求相关</p>\n<h6 id=\"rxjava\"><a class=\"anchor\" href=\"#rxjava\">#</a> rxjava:</h6>\n<p>与 retrofit 结合使用</p>\n<h6 id=\"gson\"><a class=\"anchor\" href=\"#gson\">#</a> gson:</h6>\n<p>序列化</p>\n<h3 id=\"android开发\"><a class=\"anchor\" href=\"#android开发\">#</a> Android 开发</h3>\n<h4 id=\"step1\"><a class=\"anchor\" href=\"#step1\">#</a> Step1</h4>\n<h6 id=\"intent\"><a class=\"anchor\" href=\"#intent\">#</a> intent</h6>\n<p>主要用于组件之间的传输，类似从一个 activity 到另一个 activity。</p>\n<p>要实现这种传输，需要实例化 intent 对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"被点击了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onClick: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token comment\">// 实例化 intentd</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token class-name\">Intent</span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SecondActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token function\">startActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://yida506.github.io/2022/04/21/Frida/",
            "url": "http://yida506.github.io/2022/04/21/Frida/",
            "title": "Frida",
            "date_published": "2022-04-21T11:51:59.000Z",
            "content_html": "<h4 id=\"frida基础\"><a class=\"anchor\" href=\"#frida基础\">#</a> Frida 基础</h4>\n<h5 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h5>\n<p>需要把 frida-serve push 到对应的 tmp 文件夹中</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>adb shell</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">su</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token builtin class-name\">cd</span> /data/local/tmp/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">chmod</span> <span class=\"token number\">777</span> 对应frida-serve的名字</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> ./对应frida-serve的名字+<span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//cmd 端口转发</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>adb forward tcp:27043 tcp:27043</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>adb forward tcp:27042 tcp:27042</pre></td></tr></table></figure><h4 id=\"frida介绍\"><a class=\"anchor\" href=\"#frida介绍\">#</a> Frida 介绍</h4>\n<p>frida 操作 app 的方式有两种:</p>\n<ul>\n<li>spawn (调用模式), 通过 frida 启动 app</li>\n<li>attach (附加模式), 对已启动的 app 通过 ptrace 原理注入程序</li>\n</ul>\n<blockquote>\n<p>两种注入方式主要是时机不同</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># spawn</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>frida -U --no-pause -f app -l hook.js</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># attach </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>frida -U -l test.js app</pre></td></tr></table></figure><h5 id=\"hook\"><a class=\"anchor\" href=\"#hook\">#</a> HOOK</h5>\n<p>原理就是在函数运行前，进行动态二进制插桩，很关注时机。</p>\n<h6 id=\"python\"><a class=\"anchor\" href=\"#python\">#</a> python</h6>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> frida</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">on_message</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> message<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'send'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] &#123;0&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">'payload'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>test_signature <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tjs代码</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 启动方式 1 attachH 后跟进程名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>process <span class=\"token operator\">=</span> frida<span class=\"token punctuation\">.</span>get_usb_device<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span><span class=\"token string\">'com.chaozhuo.texteditor'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>script <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>create_script<span class=\"token punctuation\">(</span>test_signature<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>script<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> on_message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>script<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>本质上写 Js 代码即可。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>process <span class=\"token operator\">=</span> frida<span class=\"token punctuation\">.</span>get_usb_device<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enumerate_processes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#可以查看当前运行的进程名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>也可以直接 adb 查看进程，这里条件可以任意，为 com.xxx 皆可，目的是缩小范围.</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>adb shell <span class=\"token string\">\"ps | grep 条件\"</span></pre></td></tr></table></figure><h6 id=\"重载的代码hook\"><a class=\"anchor\" href=\"#重载的代码hook\">#</a> 重载的代码 hook</h6>\n<p><img data-src=\"http://pic.ddddhm.cn/Frida/image-20220423112839478.png\" alt=\"image-20220423112839478\"></p>\n<p>以该处为例，该类中有两个 a 方法，我们只想 hook 上面一个，直接写就会报错。</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Frida/image-20220423113034693.png\" alt=\"image-20220423113034693\"></p>\n<p>这样，我们只需要等他报错后，修改代码即可。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 加上.overload ('a.u$a')</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Signature<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a.u$a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'enter a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上是对于调用的函数进行 hook，得到的，还有一种情况，就是方法没有被调用，我们想查看他的方法，拿到其结果，那么我们可以采用 Java.choose (类名 + 回调)。</p>\n<p>也可以考虑直接编写 js 脚本进行 frida.</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 打印出当前手机上的进程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>frida-ps -Ua</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//后面的是进程名，只需要在jsl</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>frida -U -l test.js com.example.simpleencryption</pre></td></tr></table></figure><h4 id=\"objection\"><a class=\"anchor\" href=\"#objection\">#</a> Objection</h4>\n<p>Objection 本质上是 frida 的一种工具实现，可以通过命令行输出，实现 frida 交互过程，达到类调用，hook 的目的。</p>\n<h6 id=\"安装-2\"><a class=\"anchor\" href=\"#安装-2\">#</a> 安装</h6>\n<p>由于 frida 版本是 14.1.3，直接 pip install objection 即可</p>\n<h6 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h6>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 注入代码</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>objection -g 进程名 explore  --startup-command <span class=\"token string\">\"android root disable\"</span> <span class=\"token operator\">&lt;</span>在启动前注入命令<span class=\"token operator\">></span></pre></td></tr></table></figure><ol>\n<li>寻找包名 frida-ps -U | grep 参数</li>\n<li>Objection 注入</li>\n<li>android hooking search classes [类名]</li>\n<li>android hooking search methods &lt;key&gt;[关键词] (从所有内存中加载)</li>\n<li>android hooking list class methods 包名 + 类名 (列出所有的方法)</li>\n<li>android hooking list 组件</li>\n<li>android hooking watch class_method &lt;methodName&gt;(hook 指定方法) --dump-args --dump-backtrace --dump-return</li>\n<li>jobs list (查看作业，显示 hook 的函数的信息)</li>\n<li>job kill &lt;id&gt; 删除作业</li>\n<li>memory list modules</li>\n</ol>\n<blockquote>\n<p>如果要 hook 构造方法 需要使用 $init</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://yida506.github.io/2022/04/19/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/",
            "url": "http://yida506.github.io/2022/04/19/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/",
            "title": "静态分析",
            "date_published": "2022-04-19T13:44:34.000Z",
            "content_html": "<h4 id=\"jadx使用\"><a class=\"anchor\" href=\"#jadx使用\">#</a> jadx 使用</h4>\n<p>直接用 jadx 打开 apk。</p>\n<h4 id=\"静态分析\"><a class=\"anchor\" href=\"#静态分析\">#</a> 静态分析</h4>\n<h5 id=\"1代码搜索\"><a class=\"anchor\" href=\"#1代码搜索\">#</a> 1. 代码搜索</h5>\n<p><img data-src=\"http://pic.ddddhm.cn/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20220419214843370.png\" alt=\"image-20220419214843370\"></p>\n<p>activity 里面包含主要代码。其中在 main 之前的为主界面代码，这里只有 mainActivity.</p>\n<p><img data-src=\"http://pic.ddddhm.cn/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20220419215044951.png\" alt=\"image-20220419215044951\"></p>\n<p>onCreate、onClick 为事件。</p>\n<h4 id=\"frida\"><a class=\"anchor\" href=\"#frida\">#</a> Frida</h4>\n<h5 id=\"启动\"><a class=\"anchor\" href=\"#启动\">#</a> 启动：</h5>\n<p>连接到手机后，进入安装 frida-serve 的位置</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>adb shell</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">su</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token builtin class-name\">cd</span> /data/local/tmp/</pre></td></tr></table></figure><p>ps -A | grep com</p>\n<p>com 指代的是过滤条件，该指令可以展示当前进程名，也对应下图 xml 中的 package 名。</p>\n<p><img data-src=\"http://pic.ddddhm.cn/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20220419221411727.png\" alt=\"image-20220419221411727\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> frida</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#模板</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">on_message</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> message<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'send'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] &#123;0&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">'payload'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#这里写要 hook 代码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>test_t<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Java.perform(</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    function()&#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        var MainActivity = Java.use('com.example.seccon2015.rock_paper_scissors.MainActivity')</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        MainActivity.onClick.implementation = function(val)&#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            console.log('mmmm:'+this.m.value);</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            console.log(this.n.value);</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            this.onClick(val);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        &#125;;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        #下面是匿名类的hook方法,这里要把他自带的.改为$</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         var test = Java.use('com.example.seccon2015.rock_paper_scissors.MainActivity$1')</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        test.run.implementation = function()&#123;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            console.log('this is test');</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            this.run();</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>)</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#模板</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#启动方式 1 attachH 后跟进程名</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>process <span class=\"token operator\">=</span> frida<span class=\"token punctuation\">.</span>get_usb_device<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span><span class=\"token string\">'com.example.seccon2015.rock_paper_scissors'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>script <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>create_script<span class=\"token punctuation\">(</span>test_t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>script<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> on_message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>script<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>匿名类可以通过 smali 代码判断。</p>\n<p>在匿名函数访问外部类：<br>\nthis.this$0.value.xxx.value</p>\n<pre><code>\n#打印调用堆栈\nfunction printstack()&#123;\n    console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new()));\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://yida506.github.io/2022/04/03/app%E5%85%A5%E9%97%A8/",
            "url": "http://yida506.github.io/2022/04/03/app%E5%85%A5%E9%97%A8/",
            "title": "app入门",
            "date_published": "2022-04-03T13:43:10.000Z",
            "content_html": "<h4 id=\"刷机\"><a class=\"anchor\" href=\"#刷机\">#</a> 刷机</h4>\n<p>手机选择 nexus 5</p>\n<h6 id=\"刷机包下载不同手机有不同的镜像\"><a class=\"anchor\" href=\"#刷机包下载不同手机有不同的镜像\">#</a> 刷机包下载 (不同手机有不同的镜像)：</h6>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5kcm9pZC9pbWFnZXMjYnVsbGhlYWQ=\">https://developers.google.com/android/images#bullhead</span></p>\n<p>选择版本 OPM1.171019.011, Dec 2017</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vc2V0dXAvc3RhcnQvYnVpbGQtbnVtYmVycyNzb3VyY2UtY29kZS10YWdzLWFuZC1idWlsZHM=\">https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds</span></p>\n<blockquote>\n<p>pixel 8.0.0 貌似会使得后面用 frida 有小问题</p>\n</blockquote>\n<h6 id=\"电脑驱动更新\"><a class=\"anchor\" href=\"#电脑驱动更新\">#</a> 电脑驱动更新</h6>\n<p>**win10 需要更新 google usb driver **</p>\n<blockquote>\n<p><img data-src=\"http://pic.ddddhm.cn/app%E5%85%A5%E9%97%A8/image-20220417122821654.png\" alt=\"image-20220417122821654\"></p>\n</blockquote>\n<p>然后到 bootloader 界面直接运行</p>\n<p><img data-src=\"http://pic.ddddhm.cn/app%E5%85%A5%E9%97%A8/image-20220417135832286.png\" alt=\"image-20220417135832286\"></p>\n<p>即可</p>\n<p>时间同步</p>\n<pre><code>adb shell settings put global captive_portal_http_url https://www.google.cn/generate_204\n\nadb shell settings put global captive_portal_https_url https://www.google.cn/generate_204\n\nadb shell settings put global global ntp_server 1.hk.pool.ntp.org\n\n adb shell reboot\n</code></pre>\n<h4 id=\"root\"><a class=\"anchor\" href=\"#root\">#</a> ROOT</h4>\n<p>去下一个 TWRP 镜像，</p>\n<p>然后用 fastboot falsh  recovery twrp 镜像推送镜像 ，然后从 bootloaders 界面进去 recovery 分区，安装 twrp</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RvcGpvaG53dS9NYWdpc2svcmVsZWFzZXMvdGFnL3YyMC40\">https://github.com/topjohnwu/Magisk/releases/tag/v20.4</span></p>\n<blockquote>\n<p>nexus5 和 pixel2 xl 的方式不同，pixel2 不自带 recovery 分区，需要先刷临时分区。</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 刷入临时镜像</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fastboot flash boot twrp-3.6.0_9-0-taimen.img</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//重启后进入twrp</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fastboot <span class=\"token function\">reboot</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>adb push twrp-installer-3.6.0_9-0-taimen.zip /sdcard/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>adb push Magisk-v20.4.zip /sdcard/</pre></td></tr></table></figure><p>下载 magisk 包</p>\n<p>然后通过 adb push Magisk-v20.4.zip/sdcard/ 推送到手机上</p>\n<p>这里 sdcard 指代的是默认目录。</p>\n<p>然后通过 twrp 的 install 找到传输过来的 zip 进行安装。</p>\n<blockquote>\n<p>对于 pxel 需要安装完永久的 twrp 后，点击上面的按钮在安装 magisk</p>\n</blockquote>\n<p><img data-src=\"http://pic.ddddhm.cn/app%E5%85%A5%E9%97%A8/image-20220417144216066.png\" alt=\"image-20220417144216066\"></p>\n<p>adb shell 连接手机，su 是进入 root 权限.</p>\n<blockquote>\n<p>pixel2 分区在输入 magisk 时貌似有兼容错误，</p>\n<p>adb sideload Magisk-v20.0.zip。</p>\n</blockquote>\n<h4 id=\"frida安装\"><a class=\"anchor\" href=\"#frida安装\">#</a> Frida 安装</h4>\n<h5 id=\"frida-serve安装\"><a class=\"anchor\" href=\"#frida-serve安装\">#</a> frida-serve 安装</h5>\n<p>下载对应版本的 frida-serve (14.1.3)</p>\n<h5 id=\"电脑端\"><a class=\"anchor\" href=\"#电脑端\">#</a> 电脑端</h5>\n<p>直接 pip 安装 有点慢 会卡在 setup 处</p>\n<p>然后安装 frida-tools 版本要对应</p>\n<p>接着暗转 frida-server push 到手机上</p>\n",
            "tags": []
        }
    ]
}