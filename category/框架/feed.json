{
    "version": "https://jsonfeed.org/version/1",
    "title": "菜b的爬虫记录 • All posts by \"框架\" category",
    "description": "",
    "home_page_url": "http://yida506.github.io",
    "items": [
        {
            "id": "http://yida506.github.io/2021/09/02/Feadper/",
            "url": "http://yida506.github.io/2021/09/02/Feadper/",
            "title": "Feapder",
            "date_published": "2021-09-02T15:19:36.000Z",
            "content_html": "<h2 id=\"源码解读\"><a class=\"anchor\" href=\"#源码解读\">#</a> 源码解读</h2>\n<h3 id=\"spider\"><a class=\"anchor\" href=\"#spider\">#</a> Spider</h3>\n<p>分布式爬虫</p>\n<p>Spider 继承 BaseParser, Scheduler</p>\n<h4 id=\"运行流程\"><a class=\"anchor\" href=\"#运行流程\">#</a> 运行流程</h4>\n<ol>\n<li>初始化 Spider (传入 rediskey), 此时会初始化 Spider 中的参数，以及 Scheduler 中的参数，调用多线程中的 start 方法</li>\n<li>在 start 方法中，将当前 Spider 对象存入 self._parsers 中，然后调用 Scheduler 中的_start 方法</li>\n<li>在_start 方法中，调用初始化后的 request_buffer,item_buffer,collector 的 start 方法</li>\n<li>接着根据线程数及进程数，开启多个 parser_control (主要是处理 collector)</li>\n</ol>\n<h4 id=\"spider内置方法\"><a class=\"anchor\" href=\"#spider内置方法\">#</a> Spider 内置方法</h4>\n<h6 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h6>\n<ul>\n<li>start_monitor_task 开始监控 常驻：主要涉及 redis 数量任务监控以及下发任务</li>\n<li>distribute_task 分发任务，由于继承了 Scheduler, 所以会初始化 parser 列表</li>\n<li>run 运行线程 然后调用 Scheduler 中的_start () 方法 启动 request_buffer,item_buffer,collector (均继承多线程，用 start () 常驻)</li>\n<li>parser_control</li>\n</ul>\n<h4 id=\"组件介绍\"><a class=\"anchor\" href=\"#组件介绍\">#</a> 组件介绍</h4>\n<h5 id=\"scheduler\"><a class=\"anchor\" href=\"#scheduler\">#</a> Scheduler</h5>\n<p><strong>调度器</strong></p>\n<blockquote>\n<p>决定爬虫的执行顺序，以及批次爬虫的调度逻辑</p>\n</blockquote>\n<h6 id=\"init\"><a class=\"anchor\" href=\"#init\">#</a> init</h6>\n<ul>\n<li>self._request_buffer 根据 redis_key 初始化的 request_buffer</li>\n<li>self._item_buffer 根据 redis_key 初始化的 item_buffer</li>\n<li>self._collector 根据 redis_key 初始化的 collector</li>\n<li>self._parsers 数组，用于存放 Spider 对象本身</li>\n<li>self._parser_controls 数组</li>\n<li>self._parser_control_obj  PaserControl 组件 (从 collector 中获取任务 处理 request)</li>\n</ul>\n<h5 id=\"request_buffer\"><a class=\"anchor\" href=\"#request_buffer\">#</a> request_buffer</h5>\n<ul>\n<li>init 初始化 requests 队列，del_requests 队列</li>\n<li>run: 只要未结束，就不断的往 redis 中添加任务</li>\n<li>__add_request_to_db: 将内存队列的中的任务添加至 redis 中</li>\n</ul>\n<h5 id=\"item_buffer\"><a class=\"anchor\" href=\"#item_buffer\">#</a> item_buffer</h5>\n<h5 id=\"collector\"><a class=\"anchor\" href=\"#collector\">#</a> collector</h5>\n<h5 id=\"request\"><a class=\"anchor\" href=\"#request\">#</a> Request</h5>\n<p>封装了 request<br>\n 缓存配置 (用于 debug 爬虫)</p>\n<h5 id=\"pasercontrol\"><a class=\"anchor\" href=\"#pasercontrol\">#</a> PaserControl</h5>\n<h6 id=\"run\"><a class=\"anchor\" href=\"#run\">#</a> run</h6>\n<p>从内存队列中取 request, 对其数量进行判断，然后处理中间件，获取返回后的结果</p>\n",
            "tags": []
        }
    ]
}