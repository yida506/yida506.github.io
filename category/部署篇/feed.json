{
    "version": "https://jsonfeed.org/version/1",
    "title": "菜b的爬虫记录 • All posts by \"部署篇\" category",
    "description": "",
    "home_page_url": "http://yida506.github.io",
    "items": [
        {
            "id": "http://yida506.github.io/2022/07/01/docker/",
            "url": "http://yida506.github.io/2022/07/01/docker/",
            "title": "docker",
            "date_published": "2022-07-01T15:06:24.000Z",
            "content_html": "<h3 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> Docker</h3>\n<h4 id=\"docker-windows-desktop-安装\"><a class=\"anchor\" href=\"#docker-windows-desktop-安装\">#</a> Docker windows desktop 安装</h4>\n<p>下载最新版，安装对应的 linux 镜像</p>\n<h4 id=\"docker-desktop-目录修改\"><a class=\"anchor\" href=\"#docker-desktop-目录修改\">#</a> Docker desktop 目录修改</h4>\n<blockquote>\n<p>先创建一个文件夹叫 docker</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>script</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 导出 docker-desktop</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wsl --export docker-desktop <span class=\"token string\">\"D:<span class=\"token entity\" title=\"\\\\\">\\\\</span>docker<span class=\"token entity\" title=\"\\\\\">\\\\</span>docker-desktop.tar\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 注销 docker-desktop</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> wsl --unregister docker-desktop</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 导入 docker-desktop</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>wsl --import docker-desktop <span class=\"token string\">\"D:<span class=\"token entity\" title=\"\\\\\">\\\\</span>docker<span class=\"token entity\" title=\"\\\\\">\\\\</span>wsl\"</span> <span class=\"token string\">\"D:<span class=\"token entity\" title=\"\\\\\">\\\\</span>docker<span class=\"token entity\" title=\"\\\\\">\\\\</span>docker-desktop.tar\"</span> --version <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 导出 docker-desktop-data</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>wsl --export docker-desktop-data <span class=\"token string\">\"D:<span class=\"token entity\" title=\"\\\\\">\\\\</span>docker<span class=\"token entity\" title=\"\\\\\">\\\\</span>docker-desktop-data.tar\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 注销 docker-desktop-data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> wsl --unregister docker-desktop-data</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 导入 docker-desktop</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>wsl --import docker-desktop-data <span class=\"token string\">\"D:<span class=\"token entity\" title=\"\\\\\">\\\\</span>docker<span class=\"token entity\" title=\"\\\\\">\\\\</span>wsl\"</span> <span class=\"token string\">\"D:<span class=\"token entity\" title=\"\\\\\">\\\\</span>docker<span class=\"token entity\" title=\"\\\\\">\\\\</span>docker-desktop-data.tar\"</span> --version <span class=\"token number\">2</span></pre></td></tr></table></figure><h3 id=\"docker-部署demo\"><a class=\"anchor\" href=\"#docker-部署demo\">#</a> docker 部署 demo</h3>\n<h4 id=\"python-项目打包\"><a class=\"anchor\" href=\"#python-项目打包\">#</a> python 项目打包</h4>\n<h5 id=\"rquirements生成\"><a class=\"anchor\" href=\"#rquirements生成\">#</a> rquirements 生成</h5>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3 -m pip <span class=\"token function\">install</span> pipreqs</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 在当前目录生成</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pipreqs <span class=\"token builtin class-name\">.</span> --encoding<span class=\"token operator\">=</span>utf8 --force</pre></td></tr></table></figure><h4 id=\"dockerfile生成\"><a class=\"anchor\" href=\"#dockerfile生成\">#</a> dockerfile 生成</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> Dockerfile.dockerfile</pre></td></tr></table></figure><p>然后在里面写入</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># syntax=docker/dockerfile:1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FROM python:3.8-slim-buster</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>WORKDIR /app</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>COPY requirements.txt requirements.txt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>RUN pip3 <span class=\"token function\">install</span> -r requirements.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>COPY <span class=\"token builtin class-name\">.</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>CMD <span class=\"token punctuation\">[</span> <span class=\"token string\">\"python3\"</span>, <span class=\"token string\">\"-m\"</span> , <span class=\"token string\">\"flask\"</span>, <span class=\"token string\">\"run\"</span>, <span class=\"token string\">\"--host=0.0.0.0\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>然后运行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>script</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker build --tag python-docker <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><h3 id=\"vue项目打包-按照官网的搞\"><a class=\"anchor\" href=\"#vue项目打包-按照官网的搞\">#</a> vue 项目打包 (按照官网的搞)</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>script</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 打包本地 vue 项目 会生成一个 dist 文件夹</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> run build</pre></td></tr></table></figure><blockquote>\n<p>新建一个目录 存放 disk 文件夹，在该文件夹下创建 Dockerfile 文件以及 nginx.conf<br>\nDockerfile:</p>\n</blockquote>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user  nginx;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>worker_processes  1;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>error_log  /var/log/nginx/error.log warn;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pid        /var/run/nginx.pid;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>events &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  worker_connections  1024;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>http &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  include       /etc/nginx/mime.types;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  default_type  application/octet-stream;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    '$status $body_bytes_sent \"$http_referer\" '</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  access_log  /var/log/nginx/access.log  main;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  sendfile        on;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  keepalive_timeout  65;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  server &#123;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    listen       80;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    server_name  localhost;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    location / &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      root   /vue-docker;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      index  index.html;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      try_files $uri $uri/ /index.html;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    error_page   500 502 503 504  /50x.html;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    location = /50x.html &#123;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      root   /usr/share/nginx/html;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>nginx.conf</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FROM nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>EXPOSE 80</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>COPY /dist /usr/share/nginx/html</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ENTRYPOINT nginx -g \"daemon off;\"</pre></td></tr></table></figure><p>然后直接运行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>script</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#-t 指定一个镜像的名字，譬如 nginx-image，注意最后的‘.’不能省略</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker build -t nginx-image <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>script</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -p ：配置端口映射，格式是外部访问端口：容器内端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -d ：后台运行  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># --name : 给容器取名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># docker run -p 8089:80 -d --name [容器名字][镜像名字]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>docker run -p <span class=\"token number\">8099</span>:80 -d --name vue-project nginx-image</pre></td></tr></table></figure><h3 id=\"容器推送\"><a class=\"anchor\" href=\"#容器推送\">#</a> 容器推送</h3>\n<h5 id=\"本地打包为tar-然后直接上传\"><a class=\"anchor\" href=\"#本地打包为tar-然后直接上传\">#</a> 本地打包为 tar 然后直接上传</h5>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>script</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 本地端</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker save -o centos.tar centos</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 服务器端</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>docker load -i  centos.tar</pre></td></tr></table></figure><h4 id=\"运行\"><a class=\"anchor\" href=\"#运行\">#</a> 运行</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>script</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 最后一个指代的是包名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker run -d -p <span class=\"token number\">5000</span>:5000 --name rest-server python-docker</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://yida506.github.io/2022/02/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/",
            "url": "http://yida506.github.io/2022/02/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/",
            "title": "服务器部署",
            "date_published": "2022-02-21T13:05:26.000Z",
            "content_html": "<h4 id=\"feaplat服务器部署\"><a class=\"anchor\" href=\"#feaplat服务器部署\">#</a> feaplat 服务器部署</h4>\n<h5 id=\"服务器选择选用centos76\"><a class=\"anchor\" href=\"#服务器选择选用centos76\">#</a> 服务器选择选用 centos7.6</h5>\n<p>账号:root</p>\n<p>密码：大小写混合</p>\n<p>直接使用 FinalShell 链接，其中 IP 地址对应公网 IP，端口对应 22 (默认)，采用上述账号密码进行账号密码登录。</p>\n<h4 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> Docker</h4>\n<p><strong>介绍:</strong> 本质上是通过打包的方式，将环境啥的都集中到一个地方，避免配置的复杂度，做到随用随取，同时里面相当于包含独立的 linux 主机类似 bin 啥的目录</p>\n<h6 id=\"docker-pull\"><a class=\"anchor\" href=\"#docker-pull\">#</a> docker pull：</h6>\n<p>下载网上的镜像，一般选用公用镜像，私有的建立仓库啥的</p>\n<h6 id=\"docker-run\"><a class=\"anchor\" href=\"#docker-run\">#</a> docker run:</h6>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">表示启动在后台</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-p</td>\n<td style=\"text-align:center\">8888:8888 表示端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-e</td>\n<td style=\"text-align:center\">环境 (对于 jupyter 镜像来说，加入 JUPYTER_ENABLE_LAB=yes 代表使用 lab 而不是 notebook)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-v</td>\n<td style=\"text-align:center\">给容器挂载存储卷，挂载到容器的某个目录 (/ 主机目录 : / 容器目录)</td>\n</tr>\n</tbody>\n</table>\n<p>内网穿透：<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuLmRpbmd0YWxrLmNvbS9kb2N1bWVudC9yZXNvdXJjZWRvd25sb2FkL2h0dHAtaW50cmFuZXQtcGVuZXRyYXRpb24=\">https://open.dingtalk.com/document/resourcedownload/http-intranet-penetration</span></p>\n<p>posql keyword:abc123</p>\n",
            "tags": []
        }
    ]
}