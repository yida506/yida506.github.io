{
    "version": "https://jsonfeed.org/version/1",
    "title": "菜b的爬虫记录 • All posts by \"java\" category",
    "description": "",
    "home_page_url": "http://yida506.github.io",
    "items": [
        {
            "id": "http://yida506.github.io/2022/05/15/java%E5%9F%BA%E7%A1%80/",
            "url": "http://yida506.github.io/2022/05/15/java%E5%9F%BA%E7%A1%80/",
            "title": "java基础",
            "date_published": "2022-05-15T03:27:07.000Z",
            "content_html": "<h4 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h4>\n<p>Java 反射是在运行状态中，对于任意类，都能拿到这个类的所有属性和方法。</p>\n<h4 id=\"xposedapi\"><a class=\"anchor\" href=\"#xposedapi\">#</a> XposedAPI</h4>\n<h5 id=\"构造方法hook\"><a class=\"anchor\" href=\"#构造方法hook\">#</a> 构造方法 HOOK</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用于 hook 构造方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">RposedHelpers</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAndHookConstructor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">String</span> classname<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 类名 一般为 xxxx.&lt;classname > 的形式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tclassLoader classloader<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 加载类的 不用管 默认就行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 传递的参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tparameterTypesAndCallback <span class=\"token comment\">// 回调方法 分为 hook 前和 hook 后</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>若是直接传类，那么就不需要传入 classloader</p>\n</blockquote>\n<h5 id=\"callback\"><a class=\"anchor\" href=\"#callback\">#</a> Callback</h5>\n<p>callcack 主要包含两种，一种是 HOOK 方法使用前，一种是 HOOK 方法使用后，可以在里面干任何相干的事 (修改参数、返回参数 etc..)。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">RC_MethodHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeHookedMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodHookParam</span> param<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> \t\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                           <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">beforeHookedMethod</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                           <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token string\">\"进入内部\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里的 param 指代的就是传递进来的参数列表，如果要打印参数，那就需要先构建一个对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects <span class=\"token operator\">=</span> param<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>params<span class=\"token punctuation\">.</span><span class=\"token function\">setResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//z</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>params<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取返回值</span></pre></td></tr></table></figure><h5 id=\"方法hook\"><a class=\"anchor\" href=\"#方法hook\">#</a> 方法 HOOK</h5>\n<pre><code>   RposedHelpers.findAndHookMethod(\n   \tString classname, //类名 一般为xxxx.&lt;classname&gt;的形式\n  \tclassLoader classloader, //加载类的 不用管 默认就行\n  \tString methodName, //方法名\n  \tObject..., //传递的参数\n  \tparameterTypesAndCallback // 回调方法 分为hook前和hook后\n   )\n</code></pre>\n",
            "tags": []
        }
    ]
}