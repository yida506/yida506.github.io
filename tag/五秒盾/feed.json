{
    "version": "https://jsonfeed.org/version/1",
    "title": "菜b的爬虫记录 • All posts by \"五秒盾\" tag",
    "description": "",
    "home_page_url": "http://yida506.github.io",
    "items": [
        {
            "id": "http://yida506.github.io/2022/06/12/Cloudflare/",
            "url": "http://yida506.github.io/2022/06/12/Cloudflare/",
            "title": "Cloudflare",
            "date_published": "2022-06-12T13:53:20.000Z",
            "content_html": "<h4 id=\"五秒盾分析笔记\"><a class=\"anchor\" href=\"#五秒盾分析笔记\">#</a> 五秒盾分析笔记</h4>\n<pre><code>\t网址  https://pastebin.com/login\n</code></pre>\n<h5 id=\"网站分析\"><a class=\"anchor\" href=\"#网站分析\">#</a> 网站分析</h5>\n<p>​\t\t打开会停留五秒，然后才会返回正常的网站，直接抓包分析，看其具体流程 (把 Presever 勾选上)</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220812215705386.png\" alt=\"image-20220812215705386\"></p>\n<p>​\t\t只有这个返回 200 的时候，才是我们要的网站</p>\n<p>通过观察，可以看到，先是访问了一个 503 的代码</p>\n<p>对比 charles 中的抓包</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220812220530890.png\" alt=\"image-20220812220530890\"></p>\n<p>​\t\t我们可以看到这里的这个 ray 在后面反复出现，接下来就先去 503 的请求中，访问了啥</p>\n<p>​\t\t将 charles 抓到的放到本地</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220812220847627.png\" alt=\"image-20220812220847627\"></p>\n<p>​\t\t可以看到，这里的这个 cray 其实就是后面几次访问携带的值</p>\n<p>​\t\t然后，这个访问获取的 js 经过测试是可以直接 request 访问拿到的，但是这个 js 是每次都是不一样的，也就是说，这里的 js 采用了动态 js 的思路，我们知道 js 发送请求一般都是通过 XMLHTTPREQUEST 这个玩意的，其中发送的时候都用的 send () 方法，直接在网页里面打上 xhr 断点</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220813140942887.png\" alt=\"image-20220813140942887\"></p>\n<p>​\t\t会在这里发送 send 请求， <code>l[c('0x1cb')][c('0x38')] </code>  这玩意其实就是第二个请求，然后这个 ax 就是将 <code>l._cf_chl_ctx</code>  这个东西</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220813141350017.png\" alt=\"image-20220813141350017\"></p>\n<p>​\t\t做了一个处理</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220813142115653.png\" alt=\"image-20220813142115653\"></p>\n<p>​\t\t对比一下，发现这里的这个值其实就是网页一开始这个自执行函数的值，然后直接用插件还原 js 代码，抠出来的这个函数就能直接用，但是因为这个 js 是动态的，所以里面有个值是动态，扣算法要注意，然后这个 请求会放回一段很长的代码，然后这个会返回一段很长的代码。</p>\n<p>​\t\t然后接下来就一直按下一步，发现，始终在这里来回摇摆，</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220813173911368.png\" alt=\"image-20220813173911368\"></p>\n<p>但是，观察调用栈，发现，后面的这玩意其实有所不同，一开始是直接调用的，后面的调用栈就包含了 eval，跟进去看，发现一个很骚的操作，就是把那个数组中的值反复替换，然后反复调用才会拿到最后的值，这样一来就极大加强了 ast 还原代码的成本，</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220813211453268.png\" alt=\"image-20220813211453268\"></p>\n<p>然后继续跟，发现  <code>_cf_chl_ctx</code>  这玩意里面多了点东西，</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220813211725224.png\" alt=\"image-20220813211725224\"></p>\n<p>在跟一下</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220813212631241.png\" alt=\"image-20220813212631241\"></p>\n<p>这里看着就像检测点</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220813215046671.png\" alt=\"image-20220813215046671\"></p>\n<p>果然，这里就是在添加环境啥的，然后这里这个 <code>e()</code>  其实是又是进入一次这个函数，估计又生成了一些环境，</p>\n<p><img data-src=\"http://pic.ddddhm.cn/Cloudflare/image-20220813221231138.png\" alt=\"image-20220813221231138\"></p>\n<p>​\t\t这里还有个 sendRequest，就是指向初次那个 js 的地方</p>\n<p>​\t\t重新捋一下思路，整个的流程如下：<br>\n首次访问返回 503----&gt; 访问 503 指向的 js (会根据 503 页面的 <code>window._cf_chl_ctx</code>  生成一段加密参数作为 post 请求的参数) -&gt; 返回一个长度为 10W 的字符串 (这个会用于生成 vm 代码)，然后这时候，就会进行一系列初始化的过程，在 vm 中校验环境等等然后这时候往 <code>window._cf_chl_ctx</code>  这里面加东西，最终会在发一段比较长的请求，请求成功后，拿到参数 ---&gt; 访问网页</p>\n<blockquote>\n<p>主要的难点在于，如何拿到这个环境对象，如果他检测到了你在调试，他就会返回很少的环境，</p>\n</blockquote>\n<p>这里采用油猴脚本进行 hook，其中关键点其实是在于进入 vm 前后这个环境对象的变化</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> xxa<span class=\"token operator\">=</span>Function<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">Function</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'env obj --->'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>_cf_chl_ctx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">debugger</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">xxa</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>根据堆栈的信息来看，这玩意经过了很多事件的交互。</p>\n<h4 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h4>\n<p>接下来的话就是漫长的补环境</p>\n",
            "tags": [
                "五秒盾"
            ]
        }
    ]
}