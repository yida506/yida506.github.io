{
    "version": "https://jsonfeed.org/version/1",
    "title": "菜b的爬虫记录 • All posts by \"ctf\" tag",
    "description": "",
    "home_page_url": "http://yida506.github.io",
    "items": [
        {
            "id": "http://yida506.github.io/2022/08/03/easyso/",
            "url": "http://yida506.github.io/2022/08/03/easyso/",
            "title": "easyso",
            "date_published": "2022-08-03T02:47:01.000Z",
            "content_html": "<h3 id=\"easyso\"><a class=\"anchor\" href=\"#easyso\">#</a> Easyso</h3>\n<p>直接 jadx 打开，很明显是通过 CheckString 这个方法进行的判断。</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/easyso/image-20220803105345599.png\" alt=\"image-20220803105345599\"></p>\n<p>然后打开 so</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/easyso/image-20220803105900353.png\" alt=\"image-20220803105900353\"></p>\n<p>大意是通过比较 v6 和这个字符串，如果相等就返回 true</p>\n<p>跟进 j_TestDec 查看逻辑</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/easyso/image-20220803111254528.png\" alt=\"image-20220803111254528\"></p>\n<p>大致上其实是对一个长度为 32 的字符做了这样一个操作，直接用 py 逆向还原</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>longstr <span class=\"token operator\">=</span> <span class=\"token string\">\"f72c5a36569418a20907b55be5bf95ad\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result <span class=\"token operator\">=</span> result <span class=\"token operator\">+</span> longstr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> longstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/08/02/mobilectf2/",
            "url": "http://yida506.github.io/2022/08/02/mobilectf2/",
            "title": "mobilectf2",
            "date_published": "2022-08-02T13:21:28.000Z",
            "content_html": "<h3 id=\"ctf第二题\"><a class=\"anchor\" href=\"#ctf第二题\">#</a> CTF 第二题</h3>\n<p>模拟登录</p>\n<p>packagename:com.tencent.testvuln</p>\n<h4 id=\"静态分析\"><a class=\"anchor\" href=\"#静态分析\">#</a> 静态分析</h4>\n<p>直接打开 mainactivity 看到，这里点击了登录按钮后，直接通过序列化 (intent) 传到了下一个页面</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/mobilectf2/image-20220802212523959.png\" alt=\"image-20220802212523959\"></p>\n<p>点进去发现，其实就是对输入的这两个玩意做了个加密</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/mobilectf2/image-20220802212656609.png\" alt=\"image-20220802212656609\"></p>\n<p>跟进去发现是 native 方法</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/mobilectf2/image-20220802213646813.png\" alt=\"image-20220802213646813\"></p>\n<p>找到对应的方法，可以看到，这里估计就是采用了 aes 的加密</p>\n<p>编写 aes 脚本</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#coding:utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># VEIzd/V2UPYNdn/bxH3Xig==</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 9YuQ2dk8CSaCe7DTAmaqAA==</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cipher <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">'VEIzd/V2UPYNdn/bxH3Xig=='</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cipher2 <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">'9YuQ2dk8CSaCe7DTAmaqAA=='</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token string\">b'thisisatestkey=='</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>aes <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_ECB<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>msg <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>cipher<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>msg2 <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>cipher2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg2<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># aimagetencent\u0003\u0003\u0003</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># Cas3_0f_A_CAK3\u0002</span></pre></td></tr></table></figure><p>然后直接用这个提交，发现错误，估计存在啥不清楚的地方，再看题目名称，app 漏洞第二题，直接搜索 Encrpto, 发现 FileDataActivity 中有个解密操作，然后用 aes 脚本测试，拿到结果，提交成功。</p>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://yida506.github.io/2022/08/02/mobilectf/",
            "url": "http://yida506.github.io/2022/08/02/mobilectf/",
            "title": "mobilectf",
            "date_published": "2022-08-02T07:59:10.000Z",
            "content_html": "<h3 id=\"ctf移动端\"><a class=\"anchor\" href=\"#ctf移动端\">#</a> CTF 移动端</h3>\n<h4 id=\"第一题-illusion\"><a class=\"anchor\" href=\"#第一题-illusion\">#</a> 第一题 Illusion</h4>\n<p>jadx 打开</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/mobilectf/image-20220802160426972.png\" alt=\"image-20220802160426972\"></p>\n<p>发现就是对输入的进行了一个判断，用到的是 native 方法</p>\n<p>用 ida 打开 so，然后修改下变量名</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/mobilectf/image-20220802161701172.png\" alt=\"image-20220802161701172\"></p>\n<p>这里的 aE 就对应的下面这个长字符串</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/mobilectf/image-20220802161639961.png\" alt=\"image-20220802161639961\"></p>\n<p>然后这串代码的大致意思其实就是判断计算的这个 Buffer 中的每一个值是不是和 enc 中的相等，如果相等那就返回 correct，接下来就需要进一步查看 sub_10C0 的逻辑，因为这里的 a2 恒为 93，那么直接进入 sub_1028 查看对应逻辑</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/mobilectf/image-20220802162458311.png\" alt=\"image-20220802162458311\"></p>\n<p>直接把 sub_10C0 代码 copy 下来测试</p>\n<p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/mobilectf/image-20220802164705080.png\" alt=\"image-20220802164705080\"></p>\n<p>发现主要逻辑与 a1,a2 的大小有关，如果 a1 小于 a2 就为 0，同时观察函数名可以猜测应该和除有关，接着测试几个，发现这个其实就是整数除法。</p>\n<p>回到 so 开始位置还原逻辑</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 对应的 for 循环内部的操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">-</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">93</span> <span class=\"token operator\">>></span> <span class=\"token number\">32</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span> <span class=\"token operator\">=</span> c </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c <span class=\"token operator\">-</span> <span class=\"token number\">32</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">-</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">93</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>c <span class=\"token operator\">+</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> b <span class=\"token operator\">=</span> a <span class=\"token punctuation\">[</span>分情况<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><img data-src=\"http://rfi4er02w.sabkt.gdipper.com/mobilectf/image-20220802202342663.png\" alt=\"image-20220802202342663\"></p>\n<ul>\n<li>\n<p>ord 返回字符的 unicode 编码</p>\n</li>\n<li>\n<p>chr 将 unicode 编码转化为字符</p>\n</li>\n</ul>\n<p>直接不采用分情况的写法会拿到如下 ascii 码表，其中包含负数，我们知道一个负数 / 93 然后在 &gt;&gt; 32 是会得到 0 的，同时，如果一个数大于 32 , 那么 对其进行 &gt;&gt;32 的操作，其实是不会变的，所以就需要分离出小于 32 的情况。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token string\">'(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>enc <span class=\"token operator\">=</span> <span class=\"token string\">\"Ku@'G_V9v(yGS\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>j <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">93</span><span class=\"token operator\">+</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># CISCN&#123;GJ5728&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>这里有个小 bug，就是 key 这里的值，用 Ida 打开直接看发现是上述那个 32 位的字符串</p>\n</blockquote>\n",
            "tags": [
                "CTF"
            ]
        }
    ]
}