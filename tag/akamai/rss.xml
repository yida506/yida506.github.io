<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>菜b的爬虫记录 • Posts by &#34;akamai&#34; tag</title>
        <link>http://yida506.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Wed, 15 Jun 2022 21:52:39 +0800</pubDate>
        <lastBuildDate>Wed, 15 Jun 2022 21:52:39 +0800</lastBuildDate>
        <category>CTF</category>
        <category>YRX</category>
        <category>ast</category>
        <category>rpc</category>
        <category>unidbg</category>
        <category>vmp</category>
        <category>Akamai</category>
        <category>五秒盾</category>
        <item>
            <guid isPermalink="true">http://yida506.github.io/2022/06/15/Akamai/</guid>
            <title>韩国航司akamai1.75</title>
            <link>http://yida506.github.io/2022/06/15/Akamai/</link>
            <category>Akamai</category>
            <pubDate>Wed, 15 Jun 2022 21:52:39 +0800</pubDate>
            <description><![CDATA[ &lt;h4 id=&#34;韩国航司&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#韩国航司&#34;&gt;#&lt;/a&gt; 韩国航司&lt;/h4&gt;
&lt;p&gt;网站： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZmx5YXNpYW5hLmNvbS9DL0NOL0tPL2luZGV4&#34;&gt;https://www.flyasiana.com/C/CN/KO/index&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;访问流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问流程&#34;&gt;#&lt;/a&gt; 访问流程&lt;/h4&gt;
&lt;p&gt;​		访问 index 页 (200)，然后 set-cookie -&amp;gt;post 请求传 (sensor_data)，在 set-cookie 一次 ---&amp;gt; 带 cookie 直接请求接口。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;总的来说流程其实不复杂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;sensor_data&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sensor_data&#34;&gt;#&lt;/a&gt; sensor_data&lt;/h4&gt;
&lt;h5 id=&#34;扣代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扣代码&#34;&gt;#&lt;/a&gt; 扣代码&lt;/h5&gt;
&lt;p&gt;​		首先从堆栈进去，把 akm 的 js 扣下来，发现，其实就是套了个数组，然后后续分析使用 netify 插件，保证 js 是脱混淆后的，&lt;/p&gt;
&lt;p&gt;然后，总的来说，里面出现了很多生成这玩意的地方，从 send 往上回溯，然后找到位置慢慢扣就好了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;扣下来，发现，其中计算包括了大量的环境检测，部分可以固定死，还有的就是各种事件的监听，以及 canves 生成的值，取 cookie 中的东西进行计算，时间戳的判断，然后这个会用个  &lt;code&gt;&amp;quot;-1,2,-94,-119,&amp;quot;&lt;/code&gt;  的字符串隔开。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​		直接使用测试没啥问题，如过要并发，就得拿到真实的 canvas，以及事件监听的结果尽可能多 (虽说这玩意判断不一定智能，但是一直是一样的就很容易干掉你)，更深层次的估计就是 ja3 啥的检测。&lt;/p&gt;
&lt;h6 id=&#34;并发假设&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并发假设&#34;&gt;#&lt;/a&gt; 并发假设&lt;/h6&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_0&#34;&gt; 环境随机 (浏览器头等)&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_1&#34;&gt; 时间戳随机，有些是根据他的访问流程来的，所以时间戳还是尽可能的要按他的规律来&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_2&#34;&gt; 事件监听的结果随机 (这玩意收集网页结果就行，其中还获得了其他比较重要的东西，不一致有可能会导致过不了校验)&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_3&#34;&gt; canvas 收集&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_4&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_4&#34;&gt; ja3 修改&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
